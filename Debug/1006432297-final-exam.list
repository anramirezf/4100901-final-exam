
1006432297-final-exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f4  080067f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067fc  080067fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000070  08006874  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08006874  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110e9  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002958  00000000  00000000  000311cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b54  00000000  00000000  000349f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027928  00000000  00000000  00035544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001300b  00000000  00000000  0005ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed69c  00000000  00000000  0006fe77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042b0  00000000  00000000  0015d514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001617c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a00 	.word	0x08005a00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005a00 	.word	0x08005a00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_write>:
static void MX_I2C1_Init(void);

/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	68b9      	ldr	r1, [r7, #8]
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <_write+0x28>)
 80004dc:	f002 fffe 	bl	80034dc <HAL_UART_Transmit>
return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000e0 	.word	0x200000e0

080004f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <HAL_UART_RxCpltCallback+0x28>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4807      	ldr	r0, [pc, #28]	; (800051c <HAL_UART_RxCpltCallback+0x2c>)
 8000500:	f004 fb82 	bl	8004c08 <ring_buffer_put>

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	4904      	ldr	r1, [pc, #16]	; (8000518 <HAL_UART_RxCpltCallback+0x28>)
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_UART_RxCpltCallback+0x30>)
 800050a:	f003 f871 	bl	80035f0 <HAL_UART_Receive_IT>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000184 	.word	0x20000184
 800051c:	20000178 	.word	0x20000178
 8000520:	200000e0 	.word	0x200000e0

08000524 <validate_sequence>:




void validate_sequence(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
// Define the code to validate
	printf("Validating\r\n");
 800052a:	4837      	ldr	r0, [pc, #220]	; (8000608 <validate_sequence+0xe4>)
 800052c:	f004 fec2 	bl	80052b4 <puts>
	uint8_t std_code[10] = "1006432297";
 8000530:	4a36      	ldr	r2, [pc, #216]	; (800060c <validate_sequence+0xe8>)
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	ca07      	ldmia	r2, {r0, r1, r2}
 8000538:	c303      	stmia	r3!, {r0, r1}
 800053a:	801a      	strh	r2, [r3, #0]
	uint8_t sequence[10];

// Iterate over the ring buffer to check the sequence
		for (uint8_t idx = 0; idx < 10; idx++) {
 800053c:	2300      	movs	r3, #0
 800053e:	75fb      	strb	r3, [r7, #23]
 8000540:	e009      	b.n	8000556 <validate_sequence+0x32>
	// Get ring buffer variables
			ring_buffer_get(&ring_buffer_uart_rx, &sequence[idx]);
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	463a      	mov	r2, r7
 8000546:	4413      	add	r3, r2
 8000548:	4619      	mov	r1, r3
 800054a:	4831      	ldr	r0, [pc, #196]	; (8000610 <validate_sequence+0xec>)
 800054c:	f004 fb99 	bl	8004c82 <ring_buffer_get>
		for (uint8_t idx = 0; idx < 10; idx++) {
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	3301      	adds	r3, #1
 8000554:	75fb      	strb	r3, [r7, #23]
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2b09      	cmp	r3, #9
 800055a:	d9f2      	bls.n	8000542 <validate_sequence+0x1e>
}

// Check if the sequence is equal to the data received in ring buffer
		if (memcmp(std_code, sequence, 10) == 0) {
 800055c:	4639      	mov	r1, r7
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	220a      	movs	r2, #10
 8000564:	4618      	mov	r0, r3
 8000566:	f004 ff85 	bl	8005474 <memcmp>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d113      	bne.n	8000598 <validate_sequence+0x74>
	// Print success in screen in case the sequence is correct
		ssd1306_Fill(Black);
 8000570:	2000      	movs	r0, #0
 8000572:	f004 fc23 	bl	8004dbc <ssd1306_Fill>
		ssd1306_SetCursor(20, 20);
 8000576:	2114      	movs	r1, #20
 8000578:	2014      	movs	r0, #20
 800057a:	f004 fd6d 	bl	8005058 <ssd1306_SetCursor>
		ssd1306_WriteString("Success", Font_11x18, White);
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <validate_sequence+0xf0>)
 8000580:	2301      	movs	r3, #1
 8000582:	ca06      	ldmia	r2, {r1, r2}
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <validate_sequence+0xf4>)
 8000586:	f004 fd41 	bl	800500c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800058a:	f004 fc3b 	bl	8004e04 <ssd1306_UpdateScreen>
		HAL_Delay(10000);
 800058e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000592:	f000 fc13 	bl	8000dbc <HAL_Delay>
	ssd1306_WriteString("Failed", Font_11x18, White);
	ssd1306_UpdateScreen();
	HAL_Delay(10000);
}
}
}
 8000596:	e033      	b.n	8000600 <validate_sequence+0xdc>
	multiple_fails += 1;
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <validate_sequence+0xf8>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <validate_sequence+0xf8>)
 80005a2:	701a      	strb	r2, [r3, #0]
	if (multiple_fails == 3){
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <validate_sequence+0xf8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d116      	bne.n	80005da <validate_sequence+0xb6>
		ssd1306_Fill(Black);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f004 fc05 	bl	8004dbc <ssd1306_Fill>
		ssd1306_SetCursor(20, 20);
 80005b2:	2114      	movs	r1, #20
 80005b4:	2014      	movs	r0, #20
 80005b6:	f004 fd4f 	bl	8005058 <ssd1306_SetCursor>
		ssd1306_WriteString("Blocked", Font_11x18, White);
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <validate_sequence+0xf0>)
 80005bc:	2301      	movs	r3, #1
 80005be:	ca06      	ldmia	r2, {r1, r2}
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <validate_sequence+0xfc>)
 80005c2:	f004 fd23 	bl	800500c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80005c6:	f004 fc1d 	bl	8004e04 <ssd1306_UpdateScreen>
		HAL_Delay(30000);
 80005ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80005ce:	f000 fbf5 	bl	8000dbc <HAL_Delay>
		multiple_fails = 0;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <validate_sequence+0xf8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
}
 80005d8:	e012      	b.n	8000600 <validate_sequence+0xdc>
	ssd1306_Fill(Black);
 80005da:	2000      	movs	r0, #0
 80005dc:	f004 fbee 	bl	8004dbc <ssd1306_Fill>
	ssd1306_SetCursor(20, 20);
 80005e0:	2114      	movs	r1, #20
 80005e2:	2014      	movs	r0, #20
 80005e4:	f004 fd38 	bl	8005058 <ssd1306_SetCursor>
	ssd1306_WriteString("Failed", Font_11x18, White);
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <validate_sequence+0xf0>)
 80005ea:	2301      	movs	r3, #1
 80005ec:	ca06      	ldmia	r2, {r1, r2}
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <validate_sequence+0x100>)
 80005f0:	f004 fd0c 	bl	800500c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80005f4:	f004 fc06 	bl	8004e04 <ssd1306_UpdateScreen>
	HAL_Delay(10000);
 80005f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80005fc:	f000 fbde 	bl	8000dbc <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08005a18 	.word	0x08005a18
 800060c:	08005a3c 	.word	0x08005a3c
 8000610:	20000178 	.word	0x20000178
 8000614:	2000000c 	.word	0x2000000c
 8000618:	08005a24 	.word	0x08005a24
 800061c:	20000168 	.word	0x20000168
 8000620:	08005a2c 	.word	0x08005a2c
 8000624:	08005a34 	.word	0x08005a34

08000628 <main>:

int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fb49 	bl	8000cc4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f83b 	bl	80006ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8fb 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f8c9 	bl	80007d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800063e:	f000 f887 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

// Init ring buffer
	ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 10);
 8000642:	220a      	movs	r2, #10
 8000644:	4913      	ldr	r1, [pc, #76]	; (8000694 <main+0x6c>)
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <main+0x70>)
 8000648:	f004 fac2 	bl	8004bd0 <ring_buffer_init>
// Declare UART interruption
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	4913      	ldr	r1, [pc, #76]	; (800069c <main+0x74>)
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0x78>)
 8000652:	f002 ffcd 	bl	80035f0 <HAL_UART_Receive_IT>


while (1)
{
	// Set the screen to waiting when getting the sequence
	ssd1306_Fill(Black);
 8000656:	2000      	movs	r0, #0
 8000658:	f004 fbb0 	bl	8004dbc <ssd1306_Fill>
	ssd1306_SetCursor(20, 20);
 800065c:	2114      	movs	r1, #20
 800065e:	2014      	movs	r0, #20
 8000660:	f004 fcfa 	bl	8005058 <ssd1306_SetCursor>
	ssd1306_WriteString("Waiting", Font_11x18, White);
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <main+0x7c>)
 8000666:	2301      	movs	r3, #1
 8000668:	ca06      	ldmia	r2, {r1, r2}
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0x80>)
 800066c:	f004 fcce 	bl	800500c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000670:	f004 fbc8 	bl	8004e04 <ssd1306_UpdateScreen>
	uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <main+0x70>)
 8000676:	f004 fb2e 	bl	8004cd6 <ring_buffer_size>
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
// Check if are some input data
	if (size != 0) {
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <main+0x60>
		validate_sequence();
 8000684:	f7ff ff4e 	bl	8000524 <validate_sequence>
}
		HAL_Delay(1000); // to wait one second
 8000688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068c:	f000 fb96 	bl	8000dbc <HAL_Delay>
{
 8000690:	e7e1      	b.n	8000656 <main+0x2e>
 8000692:	bf00      	nop
 8000694:	2000016c 	.word	0x2000016c
 8000698:	20000178 	.word	0x20000178
 800069c:	20000184 	.word	0x20000184
 80006a0:	200000e0 	.word	0x200000e0
 80006a4:	2000000c 	.word	0x2000000c
 80006a8:	08005a48 	.word	0x08005a48

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 feea 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f001 fba3 	bl	8001e1c <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f90e 	bl	80008fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fbda 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f8ef 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 ffa2 	bl	8002680 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f8db 	bl	80008fc <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C1_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C1_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x74>)
 800078c:	f000 fe8c 	bl	80014a8 <HAL_I2C_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 f8b1 	bl	80008fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C1_Init+0x74>)
 800079e:	f001 fa97 	bl	8001cd0 <HAL_I2CEx_ConfigAnalogFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 f8a8 	bl	80008fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ac:	2100      	movs	r1, #0
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2C1_Init+0x74>)
 80007b0:	f001 fad9 	bl	8001d66 <HAL_I2CEx_ConfigDigitalFilter>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f89f 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	40005400 	.word	0x40005400
 80007cc:	10909cec 	.word	0x10909cec

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART2_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000814:	f002 fe14 	bl	8003440 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f86d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000e0 	.word	0x200000e0
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <MX_GPIO_Init+0xc4>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_GPIO_Init+0xc4>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xc4>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 fde3 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0xc8>)
 80008ca:	f000 fc2b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f000 fc1c 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000800 	.word	0x48000800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0ac      	sub	sp, #176	; 0xb0
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2288      	movs	r2, #136	; 0x88
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fd8f 	bl	8005494 <memset>
  if(hi2c->Instance==I2C1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_I2C_MspInit+0xb0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d13b      	bne.n	80009f8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000980:	2340      	movs	r3, #64	; 0x40
 8000982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f89b 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000998:	f7ff ffb0 	bl	80008fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009d8:	4619      	mov	r1, r3
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_I2C_MspInit+0xb8>)
 80009dc:	f000 fba2 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 80009e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ea:	6593      	str	r3, [r2, #88]	; 0x58
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_I2C_MspInit+0xb4>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	37b0      	adds	r7, #176	; 0xb0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000400 	.word	0x48000400

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0ac      	sub	sp, #176	; 0xb0
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2288      	movs	r2, #136	; 0x88
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fd31 	bl	8005494 <memset>
  if(huart->Instance==USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <HAL_UART_MspInit+0xc0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d143      	bne.n	8000ac4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 f83d 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a54:	f7ff ff52 	bl	80008fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a62:	6593      	str	r3, [r2, #88]	; 0x58
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 fb38 	bl	8001124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2026      	movs	r0, #38	; 0x26
 8000aba:	f000 fa7e 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abe:	2026      	movs	r0, #38	; 0x26
 8000ac0:	f000 fa97 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	37b0      	adds	r7, #176	; 0xb0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f92c 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART2_IRQHandler+0x10>)
 8000b2e:	f002 fdab 	bl	8003688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000e0 	.word	0x200000e0

08000b3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
  }

  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f004 fc8e 	bl	8005530 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20018000 	.word	0x20018000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000188 	.word	0x20000188
 8000c48:	200006e8 	.word	0x200006e8

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f004 fc4d 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fcc1 	bl	8000628 <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb4:	08006804 	.word	0x08006804
  ldr r2, =_sbss
 8000cb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cbc:	200006e4 	.word	0x200006e4

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_Init+0x3c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_Init+0x3c>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f000 f962 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 f80f 	bl	8000d04 <HAL_InitTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	e001      	b.n	8000cf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf2:	f7ff fe09 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d023      	beq.n	8000d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_InitTick+0x70>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f96d 	bl	800100e <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d809      	bhi.n	8000d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f937 	bl	8000fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_InitTick+0x74>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e007      	b.n	8000d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e001      	b.n	8000d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	2000018c 	.word	0x2000018c

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000018c 	.word	0x2000018c

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2204      	movs	r2, #4
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e022      	b.n	8001096 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 020e 	bic.w	r2, r2, #14
 800105e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f003 021c 	and.w	r2, r3, #28
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d005      	beq.n	80010c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2204      	movs	r2, #4
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e029      	b.n	800111a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f003 021c 	and.w	r2, r3, #28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
    }
  }
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e17f      	b.n	8001434 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8171 	beq.w	800142e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d118      	bne.n	8001204 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	6939      	ldr	r1, [r7, #16]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80ac 	beq.w	800142e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a5e      	ldr	r2, [pc, #376]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ee:	4a5a      	ldr	r2, [pc, #360]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x242>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x338>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x33c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x340>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x344>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x348>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_GPIO_Init+0x34c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x22a>
 800134a:	2306      	movs	r3, #6
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800134e:	2307      	movs	r3, #7
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x244>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x244>
 8001366:	2300      	movs	r3, #0
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001378:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x334>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_GPIO_Init+0x350>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fe:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_GPIO_Init+0x350>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae78 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	48001400 	.word	0x48001400
 8001470:	48001800 	.word	0x48001800
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e08d      	b.n	80015d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fa3e 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e006      	b.n	8001530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800152e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d108      	bne.n	800154a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	e007      	b.n	800155a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69d9      	ldr	r1, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	817b      	strh	r3, [r7, #10]
 80015f2:	460b      	mov	r3, r1
 80015f4:	813b      	strh	r3, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b20      	cmp	r3, #32
 8001604:	f040 80f9 	bne.w	80017fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_I2C_Mem_Write+0x34>
 800160e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0ed      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_I2C_Mem_Write+0x4e>
 800162a:	2302      	movs	r3, #2
 800162c:	e0e6      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001636:	f7ff fbb5 	bl	8000da4 <HAL_GetTick>
 800163a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2319      	movs	r3, #25
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f955 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0d1      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2221      	movs	r2, #33	; 0x21
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2240      	movs	r2, #64	; 0x40
 8001664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001680:	88f8      	ldrh	r0, [r7, #6]
 8001682:	893a      	ldrh	r2, [r7, #8]
 8001684:	8979      	ldrh	r1, [r7, #10]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4603      	mov	r3, r0
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f8b9 	bl	8001808 <I2C_RequestMemoryWrite>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0a9      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d90e      	bls.n	80016d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	22ff      	movs	r2, #255	; 0xff
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	8979      	ldrh	r1, [r7, #10]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 facf 	bl	8001c6c <I2C_TransferConfig>
 80016ce:	e00f      	b.n	80016f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 fabe 	bl	8001c6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f94e 	bl	8001996 <I2C_WaitOnTXISFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e07b      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	3b01      	subs	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d034      	beq.n	80017a8 <HAL_I2C_Mem_Write+0x1c8>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	2b00      	cmp	r3, #0
 8001744:	d130      	bne.n	80017a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174c:	2200      	movs	r2, #0
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f8d1 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e04d      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d90e      	bls.n	8001788 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fa73 	bl	8001c6c <I2C_TransferConfig>
 8001786:	e00f      	b.n	80017a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	8979      	ldrh	r1, [r7, #10]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fa62 	bl	8001c6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d19e      	bne.n	80016f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f934 	bl	8001a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e01a      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2220      	movs	r2, #32
 80017cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_I2C_Mem_Write+0x224>)
 80017da:	400b      	ands	r3, r1
 80017dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017fa:	2302      	movs	r3, #2
  }
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	fe00e800 	.word	0xfe00e800

08001808 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	817b      	strh	r3, [r7, #10]
 800181a:	460b      	mov	r3, r1
 800181c:	813b      	strh	r3, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	8979      	ldrh	r1, [r7, #10]
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <I2C_RequestMemoryWrite+0xa4>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 fa1b 	bl	8001c6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f8ab 	bl	8001996 <I2C_WaitOnTXISFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e02c      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001850:	893b      	ldrh	r3, [r7, #8]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
 800185a:	e015      	b.n	8001888 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800185c:	893b      	ldrh	r3, [r7, #8]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	69b9      	ldr	r1, [r7, #24]
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f891 	bl	8001996 <I2C_WaitOnTXISFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e012      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f830 	bl	80018f8 <I2C_WaitOnFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	80002000 	.word	0x80002000

080018b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d103      	bne.n	80018ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d007      	beq.n	80018ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	619a      	str	r2, [r3, #24]
  }
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	e031      	b.n	800196e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d02d      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001912:	f7ff fa47 	bl	8000da4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d122      	bne.n	800196e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4013      	ands	r3, r2
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	429a      	cmp	r2, r3
 8001944:	d113      	bne.n	800196e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f043 0220 	orr.w	r2, r3, #32
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4013      	ands	r3, r2
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	429a      	cmp	r2, r3
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	429a      	cmp	r2, r3
 800198a:	d0be      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019a2:	e033      	b.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f87f 	bl	8001aac <I2C_IsErrorOccurred>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e031      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019be:	d025      	beq.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c0:	f7ff f9f0 	bl	8000da4 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d302      	bcc.n	80019d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11a      	bne.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d013      	beq.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e007      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d1c4      	bne.n	80019a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a30:	e02f      	b.n	8001a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f838 	bl	8001aac <I2C_IsErrorOccurred>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e02d      	b.n	8001aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff f9ad 	bl	8000da4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11a      	bne.n	8001a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d013      	beq.n	8001a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f043 0220 	orr.w	r2, r3, #32
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e007      	b.n	8001aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d1c8      	bne.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d068      	beq.n	8001baa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ae0:	e049      	b.n	8001b76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d045      	beq.n	8001b76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff f95b 	bl	8000da4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_IsErrorOccurred+0x54>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d13a      	bne.n	8001b76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b22:	d121      	bne.n	8001b68 <I2C_IsErrorOccurred+0xbc>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b2a:	d01d      	beq.n	8001b68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d01a      	beq.n	8001b68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b42:	f7ff f92f 	bl	8000da4 <HAL_GetTick>
 8001b46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b48:	e00e      	b.n	8001b68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b4a:	f7ff f92b 	bl	8000da4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b19      	cmp	r3, #25
 8001b56:	d907      	bls.n	8001b68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b66:	e006      	b.n	8001b76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d1e9      	bne.n	8001b4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d003      	beq.n	8001b8c <I2C_IsErrorOccurred+0xe0>
 8001b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0aa      	beq.n	8001ae2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01c      	beq.n	8001c5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fe45 	bl	80018b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <I2C_IsErrorOccurred+0x1bc>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	fe00e800 	.word	0xfe00e800

08001c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	817b      	strh	r3, [r7, #10]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c84:	7a7b      	ldrb	r3, [r7, #9]
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	0d5b      	lsrs	r3, r3, #21
 8001ca6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <I2C_TransferConfig+0x60>)
 8001cac:	430b      	orrs	r3, r1
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	ea02 0103 	and.w	r1, r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	03ff63ff 	.word	0x03ff63ff

08001cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d138      	bne.n	8001d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e032      	b.n	8001d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d139      	bne.n	8001df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e033      	b.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2224      	movs	r2, #36	; 0x24
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001db8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e000      	b.n	8001df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40007000 	.word	0x40007000

08001e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2a:	d130      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d038      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2232      	movs	r2, #50	; 0x32
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	e002      	b.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d102      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f2      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d110      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e00f      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d007      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e3ca      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b97      	ldr	r3, [pc, #604]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80e4 	beq.w	80020c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4a>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	f040 808b 	bne.w	8002020 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f040 8087 	bne.w	8002020 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f12:	4b89      	ldr	r3, [pc, #548]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e3a2      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_RCC_OscConfig+0x7c>
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_OscConfig+0x88>
 8001f44:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d223      	bcs.n	8001f9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fd55 	bl	8002a08 <RCC_SetFlashLatencyFromMSIRange>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e383      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	f043 0308 	orr.w	r3, r3, #8
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	496d      	ldr	r1, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f86:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	4968      	ldr	r1, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
 8001f9a:	e025      	b.n	8001fe8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9c:	4b66      	ldr	r3, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a65      	ldr	r2, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4960      	ldr	r1, [pc, #384]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	495b      	ldr	r1, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fd15 	bl	8002a08 <RCC_SetFlashLatencyFromMSIRange>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e343      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe8:	f000 fc4a 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b52      	ldr	r3, [pc, #328]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	4950      	ldr	r1, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x274>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_RCC_OscConfig+0x278>)
 8002006:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fe79 	bl	8000d04 <HAL_InitTick>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d052      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	e327      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d032      	beq.n	800208e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a42      	ldr	r2, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002034:	f7fe feb6 	bl	8000da4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800203c:	f7fe feb2 	bl	8000da4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e310      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a36      	ldr	r2, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4931      	ldr	r1, [pc, #196]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	492c      	ldr	r1, [pc, #176]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e01a      	b.n	80020c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209a:	f7fe fe83 	bl	8000da4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a2:	f7fe fe7f 	bl	8000da4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e2dd      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1da>
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d074      	beq.n	80021ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x21a>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d10e      	bne.n	80020fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d10b      	bne.n	80020fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d064      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d160      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e2ba      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x24a>
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e026      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211a:	d115      	bne.n	8002148 <HAL_RCC_OscConfig+0x280>
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a02      	ldr	r2, [pc, #8]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	08005a50 	.word	0x08005a50
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b9d      	ldr	r3, [pc, #628]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a9c      	ldr	r2, [pc, #624]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fe1c 	bl	8000da4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe fe18 	bl	8000da4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e276      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x2a8>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fe08 	bl	8000da4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe fe04 	bl	8000da4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e262      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x2d0>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d060      	beq.n	8002288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x310>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d119      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d116      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d8:	4b7c      	ldr	r3, [pc, #496]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x328>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e23f      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4973      	ldr	r1, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	e040      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d023      	beq.n	8002256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fdc3 	bl	8000da4 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe fdbf 	bl	8000da4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e21d      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	495f      	ldr	r1, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5c      	ldr	r2, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fd9f 	bl	8000da4 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7fe fd9b 	bl	8000da4 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1f9      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe fd7a 	bl	8000da4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fd76 	bl	8000da4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1d4      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3ec>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fd5d 	bl	8000da4 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7fe fd59 	bl	8000da4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1b7      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a6 	beq.w	8002468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	; 0x58
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002344:	2301      	movs	r3, #1
 8002346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d118      	bne.n	8002386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002360:	f7fe fd20 	bl	8000da4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fd1c 	bl	8000da4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e17a      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4d8>
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239e:	e029      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d115      	bne.n	80023d4 <HAL_RCC_OscConfig+0x50c>
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
 80023d4:	4b9c      	ldr	r3, [pc, #624]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a9b      	ldr	r2, [pc, #620]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	4b98      	ldr	r3, [pc, #608]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a97      	ldr	r2, [pc, #604]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fcd2 	bl	8000da4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fcce 	bl	8000da4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e12a      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ed      	beq.n	8002404 <HAL_RCC_OscConfig+0x53c>
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fcbb 	bl	8000da4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fcb7 	bl	8000da4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e113      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ed      	bne.n	8002432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b7a      	ldr	r3, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a79      	ldr	r2, [pc, #484]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80fe 	beq.w	800266e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	2b02      	cmp	r3, #2
 8002478:	f040 80d0 	bne.w	800261c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800247c:	4b72      	ldr	r3, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	429a      	cmp	r2, r3
 800248e:	d130      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	3b01      	subs	r3, #1
 800249c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d127      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024bc:	2a07      	cmp	r2, #7
 80024be:	bf14      	ite	ne
 80024c0:	2201      	movne	r2, #1
 80024c2:	2200      	moveq	r2, #0
 80024c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d113      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d06e      	beq.n	80025d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	d069      	beq.n	80025cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0ad      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002514:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800251a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002520:	f7fe fc40 	bl	8000da4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fc3c 	bl	8000da4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e09a      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253a:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002556:	3a01      	subs	r2, #1
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002560:	0212      	lsls	r2, r2, #8
 8002562:	4311      	orrs	r1, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002568:	0852      	lsrs	r2, r2, #1
 800256a:	3a01      	subs	r2, #1
 800256c:	0552      	lsls	r2, r2, #21
 800256e:	4311      	orrs	r1, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002574:	0852      	lsrs	r2, r2, #1
 8002576:	3a01      	subs	r2, #1
 8002578:	0652      	lsls	r2, r2, #25
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002580:	0912      	lsrs	r2, r2, #4
 8002582:	0452      	lsls	r2, r2, #17
 8002584:	430a      	orrs	r2, r1
 8002586:	4930      	ldr	r1, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002596:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a4:	f7fe fbfe 	bl	8000da4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fbfa 	bl	8000da4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e058      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ca:	e050      	b.n	800266e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e04f      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d148      	bne.n	800266e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a16      	ldr	r2, [pc, #88]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f4:	f7fe fbd6 	bl	8000da4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fbd2 	bl	8000da4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e030      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x734>
 800261a:	e028      	b.n	800266e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d023      	beq.n	800266a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x780>)
 8002628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fbb9 	bl	8000da4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	e00c      	b.n	8002650 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fbb5 	bl	8000da4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d905      	bls.n	8002650 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e013      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
 8002648:	40021000 	.word	0x40021000
 800264c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x7b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ec      	bne.n	8002636 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x7b0>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4905      	ldr	r1, [pc, #20]	; (8002678 <HAL_RCC_OscConfig+0x7b0>)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x7b4>)
 8002664:	4013      	ands	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
 8002668:	e001      	b.n	800266e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	feeefffc 	.word	0xfeeefffc

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0e7      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b75      	ldr	r3, [pc, #468]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4970      	ldr	r1, [pc, #448]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b6e      	ldr	r3, [pc, #440]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0cf      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d010      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026dc:	429a      	cmp	r2, r3
 80026de:	d908      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4960      	ldr	r1, [pc, #384]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04c      	beq.n	8002798 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	4b5a      	ldr	r3, [pc, #360]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d121      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0a6      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e09a      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08e      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e086      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4943      	ldr	r1, [pc, #268]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7fe fb1c 	bl	8000da4 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fb18 	bl	8000da4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e06e      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d208      	bcs.n	80027c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	492b      	ldr	r1, [pc, #172]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d210      	bcs.n	80027f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	4923      	ldr	r1, [pc, #140]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_RCC_ClockConfig+0x1ec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e036      	b.n	8002864 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4918      	ldr	r1, [pc, #96]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4910      	ldr	r1, [pc, #64]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002834:	f000 f824 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	490b      	ldr	r1, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x1f4>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1f8>)
 8002852:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1fc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fa53 	bl	8000d04 <HAL_InitTick>
 800285e:	4603      	mov	r3, r0
 8002860:	72fb      	strb	r3, [r7, #11]

  return status;
 8002862:	7afb      	ldrb	r3, [r7, #11]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40022000 	.word	0x40022000
 8002870:	40021000 	.word	0x40021000
 8002874:	08005a50 	.word	0x08005a50
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002898:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x34>
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d11e      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e005      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028dc:	4a2b      	ldr	r2, [pc, #172]	; (800298c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d102      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028f8:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_GetSysClockFreq+0x110>)
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e004      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d101      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_RCC_GetSysClockFreq+0x114>)
 8002906:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d134      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0xa6>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0xac>
 8002924:	e005      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002926:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_GetSysClockFreq+0x110>)
 8002928:	617b      	str	r3, [r7, #20]
      break;
 800292a:	e005      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_GetSysClockFreq+0x114>)
 800292e:	617b      	str	r3, [r7, #20]
      break;
 8002930:	e002      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	617b      	str	r3, [r7, #20]
      break;
 8002936:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	fb03 f202 	mul.w	r2, r3, r2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0e5b      	lsrs	r3, r3, #25
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	3301      	adds	r3, #1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	08005a68 	.word	0x08005a68
 8002990:	00f42400 	.word	0x00f42400
 8002994:	007a1200 	.word	0x007a1200

08002998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029b4:	f7ff fff0 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08005a60 	.word	0x08005a60

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029e0:	f7ff ffda 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0adb      	lsrs	r3, r3, #11
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4904      	ldr	r1, [pc, #16]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08005a60 	.word	0x08005a60

08002a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9ee 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
 8002a26:	e014      	b.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a40:	f7ff f9de 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002a44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a58:	d10b      	bne.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d919      	bls.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2ba0      	cmp	r3, #160	; 0xa0
 8002a64:	d902      	bls.n	8002a6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a66:	2302      	movs	r3, #2
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e013      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e010      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d902      	bls.n	8002a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a78:	2303      	movs	r3, #3
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	e00a      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d102      	bne.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a84:	2302      	movs	r3, #2
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e004      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b70      	cmp	r3, #112	; 0x70
 8002a8e:	d101      	bne.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 0207 	bic.w	r2, r3, #7
 8002a9c:	4909      	ldr	r1, [pc, #36]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40022000 	.word	0x40022000

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d041      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aec:	d02a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002af2:	d824      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afe:	d81e      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b08:	d010      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b0a:	e018      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b0c:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a85      	ldr	r2, [pc, #532]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b18:	e015      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fabb 	bl	800309c <RCCEx_PLLSAI1_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b2a:	e00c      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3320      	adds	r3, #32
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fba6 	bl	8003284 <RCCEx_PLLSAI2_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3c:	e003      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	74fb      	strb	r3, [r7, #19]
      break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b4c:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5a:	4973      	ldr	r1, [pc, #460]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b62:	e001      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d041      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b82:	d824      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b88:	d008      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b8e:	d81e      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d010      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9a:	e018      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fa73 	bl	800309c <RCCEx_PLLSAI1_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bba:	e00c      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3320      	adds	r3, #32
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fb5e 	bl	8003284 <RCCEx_PLLSAI2_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bdc:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bea:	494f      	ldr	r1, [pc, #316]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bf2:	e001      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a0 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c48:	f7fe f8ac 	bl	8000da4 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c4e:	e009      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe f8a8 	bl	8000da4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	74fb      	strb	r3, [r7, #19]
        break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d15c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d019      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe f867 	bl	8000da4 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f863 	bl	8000da4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d902      	bls.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf0:	e006      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ec      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d34:	7c7b      	ldrb	r3, [r7, #17]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b9e      	ldr	r3, [pc, #632]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a9d      	ldr	r2, [pc, #628]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d52:	4b98      	ldr	r3, [pc, #608]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	4994      	ldr	r1, [pc, #592]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d74:	4b8f      	ldr	r3, [pc, #572]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	498c      	ldr	r1, [pc, #560]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d96:	4b87      	ldr	r3, [pc, #540]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4983      	ldr	r1, [pc, #524]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db8:	4b7e      	ldr	r3, [pc, #504]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	497b      	ldr	r1, [pc, #492]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	4972      	ldr	r1, [pc, #456]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dfc:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	496a      	ldr	r1, [pc, #424]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e1e:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	4961      	ldr	r1, [pc, #388]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e40:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	4959      	ldr	r1, [pc, #356]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e62:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	4950      	ldr	r1, [pc, #320]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	4948      	ldr	r1, [pc, #288]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea6:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	493f      	ldr	r1, [pc, #252]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d028      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed6:	4937      	ldr	r1, [pc, #220]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a31      	ldr	r2, [pc, #196]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ef2:	60d3      	str	r3, [r2, #12]
 8002ef4:	e011      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	2101      	movs	r1, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f8c8 	bl	800309c <RCCEx_PLLSAI1_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d028      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	491f      	ldr	r1, [pc, #124]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f50:	60d3      	str	r3, [r2, #12]
 8002f52:	e011      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f899 	bl	800309c <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02b      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fae:	60d3      	str	r3, [r2, #12]
 8002fb0:	e014      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f867 	bl	800309c <RCCEx_PLLSAI1_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff6:	4928      	ldr	r1, [pc, #160]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003006:	d10d      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f844 	bl	800309c <RCCEx_PLLSAI1_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d014      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	74bb      	strb	r3, [r7, #18]
 8003022:	e011      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800302c:	d10c      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3320      	adds	r3, #32
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f925 	bl	8003284 <RCCEx_PLLSAI2_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003086:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800308e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d10d      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
       ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d047      	beq.n	8003172 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e044      	b.n	8003172 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d018      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x86>
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d825      	bhi.n	8003140 <RCCEx_PLLSAI1_Config+0xa4>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x62>
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d009      	beq.n	8003110 <RCCEx_PLLSAI1_Config+0x74>
 80030fc:	e020      	b.n	8003140 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310e:	e01a      	b.n	8003146 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003110:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d116      	bne.n	800314a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e013      	b.n	800314a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003122:	4b57      	ldr	r3, [pc, #348]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800313e:	e006      	b.n	800314e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e004      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	430b      	orrs	r3, r1
 800316c:	4944      	ldr	r1, [pc, #272]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d17d      	bne.n	8003274 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a40      	ldr	r2, [pc, #256]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800317e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fd fe0e 	bl	8000da4 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318a:	e009      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800318c:	f7fd fe0a 	bl	8000da4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	73fb      	strb	r3, [r7, #15]
        break;
 800319e:	e005      	b.n	80031ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a0:	4b37      	ldr	r3, [pc, #220]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ef      	bne.n	800318c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d160      	bne.n	8003274 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	0211      	lsls	r1, r2, #8
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	0912      	lsrs	r2, r2, #4
 80031d0:	0452      	lsls	r2, r2, #17
 80031d2:	430a      	orrs	r2, r1
 80031d4:	492a      	ldr	r1, [pc, #168]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	610b      	str	r3, [r1, #16]
 80031da:	e027      	b.n	800322c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d112      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	0211      	lsls	r1, r2, #8
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6912      	ldr	r2, [r2, #16]
 80031f8:	0852      	lsrs	r2, r2, #1
 80031fa:	3a01      	subs	r2, #1
 80031fc:	0552      	lsls	r2, r2, #21
 80031fe:	430a      	orrs	r2, r1
 8003200:	491f      	ldr	r1, [pc, #124]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	610b      	str	r3, [r1, #16]
 8003206:	e011      	b.n	800322c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6892      	ldr	r2, [r2, #8]
 8003218:	0211      	lsls	r1, r2, #8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6952      	ldr	r2, [r2, #20]
 800321e:	0852      	lsrs	r2, r2, #1
 8003220:	3a01      	subs	r2, #1
 8003222:	0652      	lsls	r2, r2, #25
 8003224:	430a      	orrs	r2, r1
 8003226:	4916      	ldr	r1, [pc, #88]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd fdb4 	bl	8000da4 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800323e:	e009      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003240:	f7fd fdb0 	bl	8000da4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	73fb      	strb	r3, [r7, #15]
          break;
 8003252:	e005      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ef      	beq.n	8003240 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4904      	ldr	r1, [pc, #16]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000

08003284 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003292:	4b6a      	ldr	r3, [pc, #424]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10d      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
       ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032b6:	4b61      	ldr	r3, [pc, #388]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
       ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d047      	beq.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e044      	b.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d018      	beq.n	800330a <RCCEx_PLLSAI2_Config+0x86>
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d825      	bhi.n	8003328 <RCCEx_PLLSAI2_Config+0xa4>
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d002      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0x62>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d009      	beq.n	80032f8 <RCCEx_PLLSAI2_Config+0x74>
 80032e4:	e020      	b.n	8003328 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e6:	4b55      	ldr	r3, [pc, #340]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11d      	bne.n	800332e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e01a      	b.n	800332e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e013      	b.n	8003332 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330a:	4b4c      	ldr	r3, [pc, #304]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003316:	4b49      	ldr	r3, [pc, #292]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003326:	e006      	b.n	8003336 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e004      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003336:	bf00      	nop
    }

    if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333e:	4b3f      	ldr	r3, [pc, #252]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	430b      	orrs	r3, r1
 8003354:	4939      	ldr	r1, [pc, #228]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d167      	bne.n	8003430 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a35      	ldr	r2, [pc, #212]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fd fd1a 	bl	8000da4 <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003372:	e009      	b.n	8003388 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003374:	f7fd fd16 	bl	8000da4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        break;
 8003386:	e005      	b.n	8003394 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003388:	4b2c      	ldr	r3, [pc, #176]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ef      	bne.n	8003374 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d14a      	bne.n	8003430 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
 80033b0:	0211      	lsls	r1, r2, #8
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	0912      	lsrs	r2, r2, #4
 80033b8:	0452      	lsls	r2, r2, #17
 80033ba:	430a      	orrs	r2, r1
 80033bc:	491f      	ldr	r1, [pc, #124]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	614b      	str	r3, [r1, #20]
 80033c2:	e011      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	0211      	lsls	r1, r2, #8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6912      	ldr	r2, [r2, #16]
 80033da:	0852      	lsrs	r2, r2, #1
 80033dc:	3a01      	subs	r2, #1
 80033de:	0652      	lsls	r2, r2, #25
 80033e0:	430a      	orrs	r2, r1
 80033e2:	4916      	ldr	r1, [pc, #88]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fd fcd6 	bl	8000da4 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033fa:	e009      	b.n	8003410 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033fc:	f7fd fcd2 	bl	8000da4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	73fb      	strb	r3, [r7, #15]
          break;
 800340e:	e005      	b.n	800341c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ef      	beq.n	80033fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4904      	ldr	r1, [pc, #16]	; (800343c <RCCEx_PLLSAI2_Config+0x1b8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e040      	b.n	80034d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fad2 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fec0 	bl	800420c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fc05 	bl	8003c9c <UART_SetConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01b      	b.n	80034d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 ff3f 	bl	8004350 <UART_CheckIdleState>
 80034d2:	4603      	mov	r3, r0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d178      	bne.n	80035e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Transmit+0x24>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e071      	b.n	80035e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2221      	movs	r2, #33	; 0x21
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003512:	f7fd fc47 	bl	8000da4 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d108      	bne.n	8003544 <HAL_UART_Transmit+0x68>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e003      	b.n	800354c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800354c:	e030      	b.n	80035b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 ffa1 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e03c      	b.n	80035e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	881a      	ldrh	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003580:	b292      	uxth	r2, r2
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	3302      	adds	r3, #2
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e008      	b.n	800359e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b292      	uxth	r2, r2
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	3301      	adds	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1c8      	bne.n	800354e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	2140      	movs	r1, #64	; 0x40
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 ff6a 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e005      	b.n	80035e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e000      	b.n	80035e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
  }
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003604:	2b20      	cmp	r3, #32
 8003606:	d137      	bne.n	8003678 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_UART_Receive_IT+0x24>
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e030      	b.n	800367a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_UART_Receive_IT+0x94>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01f      	beq.n	8003668 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	61bb      	str	r3, [r7, #24]
   return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	461a      	mov	r2, r3
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 ff7e 	bl	8004570 <UART_Start_Receive_IT>
 8003674:	4603      	mov	r3, r0
 8003676:	e000      	b.n	800367a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40008000 	.word	0x40008000

08003688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b0ba      	sub	sp, #232	; 0xe8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80036b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80036b6:	4013      	ands	r3, r2
 80036b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d115      	bne.n	80036f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 82ae 	beq.w	8003c42 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
      }
      return;
 80036ee:	e2a8      	b.n	8003c42 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80036f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8117 	beq.w	8003928 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003706:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800370a:	4b85      	ldr	r3, [pc, #532]	; (8003920 <HAL_UART_IRQHandler+0x298>)
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 810a 	beq.w	8003928 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d011      	beq.n	8003744 <HAL_UART_IRQHandler+0xbc>
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d011      	beq.n	8003774 <HAL_UART_IRQHandler+0xec>
 8003750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2202      	movs	r2, #2
 8003762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d011      	beq.n	80037a4 <HAL_UART_IRQHandler+0x11c>
 8003780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2204      	movs	r2, #4
 8003792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <HAL_UART_IRQHandler+0x18a>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8214 	beq.w	8003c46 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d005      	beq.n	800386a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800385e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04f      	beq.n	800390a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 ff46 	bl	80046fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d141      	bne.n	8003902 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1d9      	bne.n	800387e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d013      	beq.n	80038fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <HAL_UART_IRQHandler+0x29c>)
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fbdf 	bl	80010a2 <HAL_DMA_Abort_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d017      	beq.n	800391a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038f4:	4610      	mov	r0, r2
 80038f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e00f      	b.n	800391a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9b8 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00b      	b.n	800391a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9b4 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e007      	b.n	800391a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9b0 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003918:	e195      	b.n	8003c46 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391a:	bf00      	nop
    return;
 800391c:	e193      	b.n	8003c46 <HAL_UART_IRQHandler+0x5be>
 800391e:	bf00      	nop
 8003920:	04000120 	.word	0x04000120
 8003924:	080047c5 	.word	0x080047c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	2b01      	cmp	r3, #1
 800392e:	f040 814e 	bne.w	8003bce <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8147 	beq.w	8003bce <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8140 	beq.w	8003bce <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2210      	movs	r2, #16
 8003954:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	f040 80b8 	bne.w	8003ad6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003972:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8167 	beq.w	8003c4a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003986:	429a      	cmp	r2, r3
 8003988:	f080 815f 	bcs.w	8003c4a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 8086 	bne.w	8003ab4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1da      	bne.n	80039a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e1      	bne.n	80039f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a84:	f023 0310 	bic.w	r3, r3, #16
 8003a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e4      	bne.n	8003a74 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fab9 	bl	8001026 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8d8 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ad4:	e0b9      	b.n	8003c4a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80ab 	beq.w	8003c4e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a6 	beq.w	8003c4e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
 8003b26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e4      	bne.n	8003b02 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	623b      	str	r3, [r7, #32]
   return(result);
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b5c:	633a      	str	r2, [r7, #48]	; 0x30
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0310 	bic.w	r3, r3, #16
 8003b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e4      	bne.n	8003b84 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f85c 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bcc:	e03f      	b.n	8003c4e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x570>
 8003bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 ffe3 	bl	8004bbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bf6:	e02d      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
    }
    return;
 8003c20:	e017      	b.n	8003c52 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d012      	beq.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fdd8 	bl	80047f0 <UART_EndTransmit_IT>
    return;
 8003c40:	e008      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c42:	bf00      	nop
 8003c44:	e006      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003c52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c54:	37e8      	adds	r7, #232	; 0xe8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b08a      	sub	sp, #40	; 0x28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4ba4      	ldr	r3, [pc, #656]	; (8003f5c <UART_SetConfig+0x2c0>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a99      	ldr	r2, [pc, #612]	; (8003f60 <UART_SetConfig+0x2c4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	4313      	orrs	r3, r2
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a90      	ldr	r2, [pc, #576]	; (8003f64 <UART_SetConfig+0x2c8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d126      	bne.n	8003d74 <UART_SetConfig+0xd8>
 8003d26:	4b90      	ldr	r3, [pc, #576]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d81b      	bhi.n	8003d6c <UART_SetConfig+0xd0>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0xa0>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d5d 	.word	0x08003d5d
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d65 	.word	0x08003d65
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d52:	e116      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e112      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e10e      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e10a      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e106      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7c      	ldr	r2, [pc, #496]	; (8003f6c <UART_SetConfig+0x2d0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d138      	bne.n	8003df0 <UART_SetConfig+0x154>
 8003d7e:	4b7a      	ldr	r3, [pc, #488]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d82d      	bhi.n	8003de8 <UART_SetConfig+0x14c>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0xf8>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003de9 	.word	0x08003de9
 8003da0:	08003de9 	.word	0x08003de9
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003de9 	.word	0x08003de9
 8003dac:	08003de9 	.word	0x08003de9
 8003db0:	08003de9 	.word	0x08003de9
 8003db4:	08003dd1 	.word	0x08003dd1
 8003db8:	08003de9 	.word	0x08003de9
 8003dbc:	08003de9 	.word	0x08003de9
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e0d8      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e0d4      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e0d0      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e0cc      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dee:	e0c8      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d125      	bne.n	8003e46 <UART_SetConfig+0x1aa>
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d016      	beq.n	8003e36 <UART_SetConfig+0x19a>
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	d818      	bhi.n	8003e3e <UART_SetConfig+0x1a2>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d00a      	beq.n	8003e26 <UART_SetConfig+0x18a>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d814      	bhi.n	8003e3e <UART_SetConfig+0x1a2>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <UART_SetConfig+0x182>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d008      	beq.n	8003e2e <UART_SetConfig+0x192>
 8003e1c:	e00f      	b.n	8003e3e <UART_SetConfig+0x1a2>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e24:	e0ad      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e26:	2302      	movs	r3, #2
 8003e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2c:	e0a9      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e2e:	2304      	movs	r3, #4
 8003e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e34:	e0a5      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e36:	2308      	movs	r3, #8
 8003e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3c:	e0a1      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e3e:	2310      	movs	r3, #16
 8003e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e44:	e09d      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4a      	ldr	r2, [pc, #296]	; (8003f74 <UART_SetConfig+0x2d8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d125      	bne.n	8003e9c <UART_SetConfig+0x200>
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e5c:	d016      	beq.n	8003e8c <UART_SetConfig+0x1f0>
 8003e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e60:	d818      	bhi.n	8003e94 <UART_SetConfig+0x1f8>
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d00a      	beq.n	8003e7c <UART_SetConfig+0x1e0>
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d814      	bhi.n	8003e94 <UART_SetConfig+0x1f8>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <UART_SetConfig+0x1d8>
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d008      	beq.n	8003e84 <UART_SetConfig+0x1e8>
 8003e72:	e00f      	b.n	8003e94 <UART_SetConfig+0x1f8>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e082      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e07e      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e84:	2304      	movs	r3, #4
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e07a      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e92:	e076      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9a:	e072      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <UART_SetConfig+0x2dc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12a      	bne.n	8003efc <UART_SetConfig+0x260>
 8003ea6:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb4:	d01a      	beq.n	8003eec <UART_SetConfig+0x250>
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d81b      	bhi.n	8003ef4 <UART_SetConfig+0x258>
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d00c      	beq.n	8003edc <UART_SetConfig+0x240>
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d815      	bhi.n	8003ef4 <UART_SetConfig+0x258>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <UART_SetConfig+0x238>
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d008      	beq.n	8003ee4 <UART_SetConfig+0x248>
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x258>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e052      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003edc:	2302      	movs	r3, #2
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e04e      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e04a      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003eec:	2308      	movs	r3, #8
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e046      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efa:	e042      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <UART_SetConfig+0x2c4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d13a      	bne.n	8003f7c <UART_SetConfig+0x2e0>
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f14:	d01a      	beq.n	8003f4c <UART_SetConfig+0x2b0>
 8003f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1a:	d81b      	bhi.n	8003f54 <UART_SetConfig+0x2b8>
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d00c      	beq.n	8003f3c <UART_SetConfig+0x2a0>
 8003f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f26:	d815      	bhi.n	8003f54 <UART_SetConfig+0x2b8>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <UART_SetConfig+0x298>
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d008      	beq.n	8003f44 <UART_SetConfig+0x2a8>
 8003f32:	e00f      	b.n	8003f54 <UART_SetConfig+0x2b8>
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e022      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e01e      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003f44:	2304      	movs	r3, #4
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e01a      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f52:	e016      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003f54:	2310      	movs	r3, #16
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5a:	e012      	b.n	8003f82 <UART_SetConfig+0x2e6>
 8003f5c:	efff69f3 	.word	0xefff69f3
 8003f60:	40008000 	.word	0x40008000
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40004400 	.word	0x40004400
 8003f70:	40004800 	.word	0x40004800
 8003f74:	40004c00 	.word	0x40004c00
 8003f78:	40005000 	.word	0x40005000
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a9f      	ldr	r2, [pc, #636]	; (8004204 <UART_SetConfig+0x568>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d17a      	bne.n	8004082 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d824      	bhi.n	8003fde <UART_SetConfig+0x342>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x300>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fdf 	.word	0x08003fdf
 8003fac:	08003fcf 	.word	0x08003fcf
 8003fb0:	08003fdf 	.word	0x08003fdf
 8003fb4:	08003fdf 	.word	0x08003fdf
 8003fb8:	08003fdf 	.word	0x08003fdf
 8003fbc:	08003fd7 	.word	0x08003fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fcf6 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	61f8      	str	r0, [r7, #28]
        break;
 8003fc6:	e010      	b.n	8003fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	; (8004208 <UART_SetConfig+0x56c>)
 8003fca:	61fb      	str	r3, [r7, #28]
        break;
 8003fcc:	e00d      	b.n	8003fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7fe fc57 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8003fd2:	61f8      	str	r0, [r7, #28]
        break;
 8003fd4:	e009      	b.n	8003fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fda:	61fb      	str	r3, [r7, #28]
        break;
 8003fdc:	e005      	b.n	8003fea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80fb 	beq.w	80041e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d305      	bcc.n	800400e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004014:	e0e8      	b.n	80041e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2200      	movs	r2, #0
 800401a:	461c      	mov	r4, r3
 800401c:	4615      	mov	r5, r2
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	022b      	lsls	r3, r5, #8
 8004028:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800402c:	0222      	lsls	r2, r4, #8
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	6849      	ldr	r1, [r1, #4]
 8004032:	0849      	lsrs	r1, r1, #1
 8004034:	2000      	movs	r0, #0
 8004036:	4688      	mov	r8, r1
 8004038:	4681      	mov	r9, r0
 800403a:	eb12 0a08 	adds.w	sl, r2, r8
 800403e:	eb43 0b09 	adc.w	fp, r3, r9
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004050:	4650      	mov	r0, sl
 8004052:	4659      	mov	r1, fp
 8004054:	f7fc f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004066:	d308      	bcc.n	800407a <UART_SetConfig+0x3de>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d204      	bcs.n	800407a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e0b6      	b.n	80041e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004080:	e0b2      	b.n	80041e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	d15e      	bne.n	800414a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800408c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004090:	2b08      	cmp	r3, #8
 8004092:	d828      	bhi.n	80040e6 <UART_SetConfig+0x44a>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x400>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe fc76 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 80040c4:	61f8      	str	r0, [r7, #28]
        break;
 80040c6:	e014      	b.n	80040f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7fe fc88 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 80040cc:	61f8      	str	r0, [r7, #28]
        break;
 80040ce:	e010      	b.n	80040f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <UART_SetConfig+0x56c>)
 80040d2:	61fb      	str	r3, [r7, #28]
        break;
 80040d4:	e00d      	b.n	80040f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7fe fbd3 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80040da:	61f8      	str	r0, [r7, #28]
        break;
 80040dc:	e009      	b.n	80040f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	61fb      	str	r3, [r7, #28]
        break;
 80040e4:	e005      	b.n	80040f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d077      	beq.n	80041e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	005a      	lsls	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d916      	bls.n	8004142 <UART_SetConfig+0x4a6>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d212      	bcs.n	8004142 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b29a      	uxth	r2, r3
 8004132:	8afb      	ldrh	r3, [r7, #22]
 8004134:	4313      	orrs	r3, r2
 8004136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	8afa      	ldrh	r2, [r7, #22]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e052      	b.n	80041e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004148:	e04e      	b.n	80041e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800414a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414e:	2b08      	cmp	r3, #8
 8004150:	d827      	bhi.n	80041a2 <UART_SetConfig+0x506>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x4bc>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004185 	.word	0x08004185
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004193 	.word	0x08004193
 800416c:	080041a3 	.word	0x080041a3
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
 8004178:	0800419b 	.word	0x0800419b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fe fc18 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8004180:	61f8      	str	r0, [r7, #28]
        break;
 8004182:	e014      	b.n	80041ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7fe fc2a 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8004188:	61f8      	str	r0, [r7, #28]
        break;
 800418a:	e010      	b.n	80041ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <UART_SetConfig+0x56c>)
 800418e:	61fb      	str	r3, [r7, #28]
        break;
 8004190:	e00d      	b.n	80041ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7fe fb75 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8004196:	61f8      	str	r0, [r7, #28]
        break;
 8004198:	e009      	b.n	80041ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	61fb      	str	r3, [r7, #28]
        break;
 80041a0:	e005      	b.n	80041ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041ac:	bf00      	nop
    }

    if (pclk != 0U)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d019      	beq.n	80041e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	085a      	lsrs	r2, r3, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	441a      	add	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d909      	bls.n	80041e2 <UART_SetConfig+0x546>
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d205      	bcs.n	80041e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	e002      	b.n	80041e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	40008000 	.word	0x40008000
 8004208:	00f42400 	.word	0x00f42400

0800420c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01a      	beq.n	8004322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d10a      	bne.n	8004322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b098      	sub	sp, #96	; 0x60
 8004354:	af02      	add	r7, sp, #8
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004360:	f7fc fd20 	bl	8000da4 <HAL_GetTick>
 8004364:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b08      	cmp	r3, #8
 8004372:	d12e      	bne.n	80043d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	2200      	movs	r2, #0
 800437e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f88c 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d021      	beq.n	80043d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a2:	653b      	str	r3, [r7, #80]	; 0x50
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
 80043ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e062      	b.n	8004498 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d149      	bne.n	8004474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f856 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03c      	beq.n	8004474 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	623b      	str	r3, [r7, #32]
   return(result);
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800440e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
 800441a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	60fb      	str	r3, [r7, #12]
   return(result);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800444c:	61fa      	str	r2, [r7, #28]
 800444e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	617b      	str	r3, [r7, #20]
   return(result);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e011      	b.n	8004498 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3758      	adds	r7, #88	; 0x58
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	e049      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d045      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fc fc73 	bl	8000da4 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e048      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d031      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d110      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2208      	movs	r2, #8
 80044f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f8ff 	bl	80046fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2208      	movs	r2, #8
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e029      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004520:	d111      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800452a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f8e5 	bl	80046fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00f      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d0a6      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004570:	b480      	push	{r7}
 8004572:	b097      	sub	sp, #92	; 0x5c
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d10e      	bne.n	80045c2 <UART_Start_Receive_IT+0x52>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <UART_Start_Receive_IT+0x48>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b6:	e02d      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c0:	e028      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <UART_Start_Receive_IT+0x76>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <UART_Start_Receive_IT+0x6c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045da:	e01b      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	227f      	movs	r2, #127	; 0x7f
 80045e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e4:	e016      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ee:	d10d      	bne.n	800460c <UART_Start_Receive_IT+0x9c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <UART_Start_Receive_IT+0x92>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004600:	e008      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	223f      	movs	r2, #63	; 0x3f
 8004606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800460a:	e003      	b.n	8004614 <UART_Start_Receive_IT+0xa4>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2222      	movs	r2, #34	; 0x22
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	657b      	str	r3, [r7, #84]	; 0x54
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004644:	64ba      	str	r2, [r7, #72]	; 0x48
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800464a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d107      	bne.n	8004672 <UART_Start_Receive_IT+0x102>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <UART_Start_Receive_IT+0x184>)
 800466e:	669a      	str	r2, [r3, #104]	; 0x68
 8004670:	e002      	b.n	8004678 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <UART_Start_Receive_IT+0x188>)
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d019      	beq.n	80046b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
 80046a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_Start_Receive_IT+0x110>
 80046b2:	e018      	b.n	80046e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f043 0320 	orr.w	r3, r3, #32
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	69f9      	ldr	r1, [r7, #28]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	375c      	adds	r7, #92	; 0x5c
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	08004a01 	.word	0x08004a01
 80046f8:	08004845 	.word	0x08004845

080046fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b095      	sub	sp, #84	; 0x54
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	643b      	str	r3, [r7, #64]	; 0x40
 8004724:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	61fb      	str	r3, [r7, #28]
   return(result);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	2b01      	cmp	r3, #1
 8004770:	d118      	bne.n	80047a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	647b      	str	r3, [r7, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	613b      	str	r3, [r7, #16]
   return(result);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e6      	bne.n	8004772 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047b8:	bf00      	nop
 80047ba:	3754      	adds	r7, #84	; 0x54
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fa44 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60bb      	str	r3, [r7, #8]
   return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fa10 	bl	8003c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b09c      	sub	sp, #112	; 0x70
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004852:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485c:	2b22      	cmp	r3, #34	; 0x22
 800485e:	f040 80be 	bne.w	80049de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004868:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800486c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004870:	b2d9      	uxtb	r1, r3
 8004872:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	400a      	ands	r2, r1
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 80a3 	bne.w	80049f2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80048cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004900:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <UART_RxISR_8BIT+0x1b8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01f      	beq.n	8004970 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	623b      	str	r3, [r7, #32]
   return(result);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004952:	663b      	str	r3, [r7, #96]	; 0x60
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004974:	2b01      	cmp	r3, #1
 8004976:	d12e      	bne.n	80049d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	60fb      	str	r3, [r7, #12]
   return(result);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0310 	bic.w	r3, r3, #16
 8004992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	617b      	str	r3, [r7, #20]
   return(result);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d103      	bne.n	80049c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f958 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049d4:	e00d      	b.n	80049f2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb fd8a 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 80049dc:	e009      	b.n	80049f2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	8b1b      	ldrh	r3, [r3, #24]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	b292      	uxth	r2, r2
 80049f0:	831a      	strh	r2, [r3, #24]
}
 80049f2:	bf00      	nop
 80049f4:	3770      	adds	r7, #112	; 0x70
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40008000 	.word	0x40008000

08004a00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b09c      	sub	sp, #112	; 0x70
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a18:	2b22      	cmp	r3, #34	; 0x22
 8004a1a:	f040 80be 	bne.w	8004b9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004a32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 80a3 	bne.w	8004bae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
 8004a88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e6      	bne.n	8004a68 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aba:	643a      	str	r2, [r7, #64]	; 0x40
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e5      	bne.n	8004a9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <UART_RxISR_16BIT+0x1b8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01f      	beq.n	8004b2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d018      	beq.n	8004b2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d12e      	bne.n	8004b92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d103      	bne.n	8004b82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff f87a 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b90:	e00d      	b.n	8004bae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fb fcac 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8004b98:	e009      	b.n	8004bae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	b292      	uxth	r2, r2
 8004bac:	831a      	strh	r2, [r3, #24]
}
 8004bae:	bf00      	nop
 8004bb0:	3770      	adds	r7, #112	; 0x70
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40008000 	.word	0x40008000

08004bbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	729a      	strb	r2, [r3, #10]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	8892      	ldrh	r2, [r2, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	889b      	ldrh	r3, [r3, #4]
 8004c26:	3301      	adds	r3, #1
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	8912      	ldrh	r2, [r2, #8]
 8004c2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c30:	fb01 f202 	mul.w	r2, r1, r2
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7a9b      	ldrb	r3, [r3, #10]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	88db      	ldrh	r3, [r3, #6]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	8912      	ldrh	r2, [r2, #8]
 8004c4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c52:	fb01 f202 	mul.w	r2, r1, r2
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	889a      	ldrh	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	88db      	ldrh	r3, [r3, #6]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d104      	bne.n	8004c74 <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	729a      	strb	r2, [r3, #10]
		return 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <ring_buffer_put+0x6e>
	}
	return 1;
 8004c74:	2301      	movs	r3, #1
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <ring_buffer_get>:
/**
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	if (ring_buffer_is_empty(ring_buffer) == 0) {
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f84a 	bl	8004d26 <ring_buffer_is_empty>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d119      	bne.n	8004ccc <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	88d2      	ldrh	r2, [r2, #6]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	88db      	ldrh	r3, [r3, #6]
 8004cac:	3301      	adds	r3, #1
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	8912      	ldrh	r2, [r2, #8]
 8004cb2:	fb93 f1f2 	sdiv	r1, r3, r2
 8004cb6:	fb01 f202 	mul.w	r2, r1, r2
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	729a      	strb	r2, [r3, #10]
		return 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <ring_buffer_get+0x4c>
	}
	return 0;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <ring_buffer_size>:

/**
 * @brief This function returns the size of the ring buffer
*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	81fb      	strh	r3, [r7, #14]

	if ((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head)) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7a9b      	ldrb	r3, [r3, #10]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <ring_buffer_size+0x2e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	88da      	ldrh	r2, [r3, #6]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	889b      	ldrh	r3, [r3, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d806      	bhi.n	8004d04 <ring_buffer_size+0x2e>
		size = ring_buffer->head - ring_buffer->tail;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	889a      	ldrh	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	88db      	ldrh	r3, [r3, #6]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	81fb      	strh	r3, [r7, #14]
 8004d02:	e009      	b.n	8004d18 <ring_buffer_size+0x42>
	} else {
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	889a      	ldrh	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8919      	ldrh	r1, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	88db      	ldrh	r3, [r3, #6]
 8004d10:	1acb      	subs	r3, r1, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 8004d18:	89fb      	ldrh	r3, [r7, #14]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <ring_buffer_is_empty>:

/**
 * @brief this function checks if the buffer is empty
 */
uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
	return ((ring_buffer->is_full == 0) && (ring_buffer->tail == ring_buffer->head));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7a9b      	ldrb	r3, [r3, #10]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d107      	bne.n	8004d46 <ring_buffer_is_empty+0x20>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	88da      	ldrh	r2, [r3, #6]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	889b      	ldrh	r3, [r3, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d101      	bne.n	8004d46 <ring_buffer_is_empty+0x20>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <ring_buffer_is_empty+0x22>
 8004d46:	2300      	movs	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	1dfb      	adds	r3, r7, #7
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2301      	movs	r3, #1
 8004d72:	2200      	movs	r2, #0
 8004d74:	2178      	movs	r1, #120	; 0x78
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <ssd1306_WriteCommand+0x2c>)
 8004d78:	f7fc fc32 	bl	80015e0 <HAL_I2C_Mem_Write>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	2000008c 	.word	0x2000008c

08004d88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af04      	add	r7, sp, #16
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9a:	9202      	str	r2, [sp, #8]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	2301      	movs	r3, #1
 8004da4:	2240      	movs	r2, #64	; 0x40
 8004da6:	2178      	movs	r1, #120	; 0x78
 8004da8:	4803      	ldr	r0, [pc, #12]	; (8004db8 <ssd1306_WriteData+0x30>)
 8004daa:	f7fc fc19 	bl	80015e0 <HAL_I2C_Mem_Write>
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2000008c 	.word	0x2000008c

08004dbc <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e00d      	b.n	8004de8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <ssd1306_Fill+0x1a>
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	e000      	b.n	8004dd8 <ssd1306_Fill+0x1c>
 8004dd6:	21ff      	movs	r1, #255	; 0xff
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <ssd1306_Fill+0x44>)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	460a      	mov	r2, r1
 8004de0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3301      	adds	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d3ed      	bcc.n	8004dcc <ssd1306_Fill+0x10>
    }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000190 	.word	0x20000190

08004e04 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	e016      	b.n	8004e3e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	3b50      	subs	r3, #80	; 0x50
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ff9e 	bl	8004d58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff ff9b 	bl	8004d58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004e22:	2010      	movs	r0, #16
 8004e24:	f7ff ff98 	bl	8004d58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	01db      	lsls	r3, r3, #7
 8004e2c:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <ssd1306_UpdateScreen+0x4c>)
 8004e2e:	4413      	add	r3, r2
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ffa8 	bl	8004d88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	71fb      	strb	r3, [r7, #7]
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b07      	cmp	r3, #7
 8004e42:	d9e5      	bls.n	8004e10 <ssd1306_UpdateScreen+0xc>
    }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000190 	.word	0x20000190

08004e54 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	71bb      	strb	r3, [r7, #6]
 8004e62:	4613      	mov	r3, r2
 8004e64:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db3d      	blt.n	8004eea <ssd1306_DrawPixel+0x96>
 8004e6e:	79bb      	ldrb	r3, [r7, #6]
 8004e70:	2b3f      	cmp	r3, #63	; 0x3f
 8004e72:	d83a      	bhi.n	8004eea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004e74:	797b      	ldrb	r3, [r7, #5]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d11a      	bne.n	8004eb0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e7a:	79fa      	ldrb	r2, [r7, #7]
 8004e7c:	79bb      	ldrb	r3, [r7, #6]
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	b2d8      	uxtb	r0, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	01db      	lsls	r3, r3, #7
 8004e86:	4413      	add	r3, r2
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <ssd1306_DrawPixel+0xa4>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	b25a      	sxtb	r2, r3
 8004e8e:	79bb      	ldrb	r3, [r7, #6]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	b259      	sxtb	r1, r3
 8004ea0:	79fa      	ldrb	r2, [r7, #7]
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	01db      	lsls	r3, r3, #7
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b2c9      	uxtb	r1, r1
 8004eaa:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <ssd1306_DrawPixel+0xa4>)
 8004eac:	54d1      	strb	r1, [r2, r3]
 8004eae:	e01d      	b.n	8004eec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004eb0:	79fa      	ldrb	r2, [r7, #7]
 8004eb2:	79bb      	ldrb	r3, [r7, #6]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	b2d8      	uxtb	r0, r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <ssd1306_DrawPixel+0xa4>)
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	b25a      	sxtb	r2, r3
 8004ec4:	79bb      	ldrb	r3, [r7, #6]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	b25b      	sxtb	r3, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b259      	sxtb	r1, r3
 8004eda:	79fa      	ldrb	r2, [r7, #7]
 8004edc:	4603      	mov	r3, r0
 8004ede:	01db      	lsls	r3, r3, #7
 8004ee0:	4413      	add	r3, r2
 8004ee2:	b2c9      	uxtb	r1, r1
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <ssd1306_DrawPixel+0xa4>)
 8004ee6:	54d1      	strb	r1, [r2, r3]
 8004ee8:	e000      	b.n	8004eec <ssd1306_DrawPixel+0x98>
        return;
 8004eea:	bf00      	nop
    }
}
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000190 	.word	0x20000190

08004efc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	1d38      	adds	r0, r7, #4
 8004f06:	e880 0006 	stmia.w	r0, {r1, r2}
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	4613      	mov	r3, r2
 8004f12:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b1f      	cmp	r3, #31
 8004f18:	d902      	bls.n	8004f20 <ssd1306_WriteChar+0x24>
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b7e      	cmp	r3, #126	; 0x7e
 8004f1e:	d901      	bls.n	8004f24 <ssd1306_WriteChar+0x28>
        return 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e06d      	b.n	8005000 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004f24:	4b38      	ldr	r3, [pc, #224]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	793b      	ldrb	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	dc06      	bgt.n	8004f40 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004f32:	4b35      	ldr	r3, [pc, #212]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	461a      	mov	r2, r3
 8004f38:	797b      	ldrb	r3, [r7, #5]
 8004f3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	dd01      	ble.n	8004f44 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e05d      	b.n	8005000 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	e04c      	b.n	8004fe4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	3b20      	subs	r3, #32
 8004f50:	7979      	ldrb	r1, [r7, #5]
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	440b      	add	r3, r1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	e034      	b.n	8004fd4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	b2d8      	uxtb	r0, r3
 8004f88:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004f8a:	885b      	ldrh	r3, [r3, #2]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	7bba      	ldrb	r2, [r7, #14]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f7ff ff5b 	bl	8004e54 <ssd1306_DrawPixel>
 8004f9e:	e016      	b.n	8004fce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	b2d8      	uxtb	r0, r3
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004fb0:	885b      	ldrh	r3, [r3, #2]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	b2d9      	uxtb	r1, r3
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f7ff ff43 	bl	8004e54 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	793b      	ldrb	r3, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d3c5      	bcc.n	8004f6a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	797b      	ldrb	r3, [r7, #5]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d3ad      	bcc.n	8004f4a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	793b      	ldrb	r3, [r7, #4]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	4b03      	ldr	r3, [pc, #12]	; (8005008 <ssd1306_WriteChar+0x10c>)
 8004ffc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3724      	adds	r7, #36	; 0x24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	20000590 	.word	0x20000590

0800500c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	1d38      	adds	r0, r7, #4
 8005016:	e880 0006 	stmia.w	r0, {r1, r2}
 800501a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800501c:	e012      	b.n	8005044 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	7818      	ldrb	r0, [r3, #0]
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	1d3a      	adds	r2, r7, #4
 8005026:	ca06      	ldmia	r2, {r1, r2}
 8005028:	f7ff ff68 	bl	8004efc <ssd1306_WriteChar>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d002      	beq.n	800503e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	e008      	b.n	8005050 <ssd1306_WriteString+0x44>
        }
        str++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e8      	bne.n	800501e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	781b      	ldrb	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	460a      	mov	r2, r1
 8005062:	71fb      	strb	r3, [r7, #7]
 8005064:	4613      	mov	r3, r2
 8005066:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	b29a      	uxth	r2, r3
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <ssd1306_SetCursor+0x2c>)
 800506e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005070:	79bb      	ldrb	r3, [r7, #6]
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <ssd1306_SetCursor+0x2c>)
 8005076:	805a      	strh	r2, [r3, #2]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20000590 	.word	0x20000590

08005088 <std>:
 8005088:	2300      	movs	r3, #0
 800508a:	b510      	push	{r4, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	e9c0 3300 	strd	r3, r3, [r0]
 8005092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005096:	6083      	str	r3, [r0, #8]
 8005098:	8181      	strh	r1, [r0, #12]
 800509a:	6643      	str	r3, [r0, #100]	; 0x64
 800509c:	81c2      	strh	r2, [r0, #14]
 800509e:	6183      	str	r3, [r0, #24]
 80050a0:	4619      	mov	r1, r3
 80050a2:	2208      	movs	r2, #8
 80050a4:	305c      	adds	r0, #92	; 0x5c
 80050a6:	f000 f9f5 	bl	8005494 <memset>
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <std+0x58>)
 80050ac:	6263      	str	r3, [r4, #36]	; 0x24
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <std+0x5c>)
 80050b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <std+0x60>)
 80050b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <std+0x64>)
 80050b8:	6323      	str	r3, [r4, #48]	; 0x30
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <std+0x68>)
 80050bc:	6224      	str	r4, [r4, #32]
 80050be:	429c      	cmp	r4, r3
 80050c0:	d006      	beq.n	80050d0 <std+0x48>
 80050c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050c6:	4294      	cmp	r4, r2
 80050c8:	d002      	beq.n	80050d0 <std+0x48>
 80050ca:	33d0      	adds	r3, #208	; 0xd0
 80050cc:	429c      	cmp	r4, r3
 80050ce:	d105      	bne.n	80050dc <std+0x54>
 80050d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d8:	f000 ba54 	b.w	8005584 <__retarget_lock_init_recursive>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	bf00      	nop
 80050e0:	080052c5 	.word	0x080052c5
 80050e4:	080052e7 	.word	0x080052e7
 80050e8:	0800531f 	.word	0x0800531f
 80050ec:	08005343 	.word	0x08005343
 80050f0:	20000598 	.word	0x20000598

080050f4 <stdio_exit_handler>:
 80050f4:	4a02      	ldr	r2, [pc, #8]	; (8005100 <stdio_exit_handler+0xc>)
 80050f6:	4903      	ldr	r1, [pc, #12]	; (8005104 <stdio_exit_handler+0x10>)
 80050f8:	4803      	ldr	r0, [pc, #12]	; (8005108 <stdio_exit_handler+0x14>)
 80050fa:	f000 b869 	b.w	80051d0 <_fwalk_sglue>
 80050fe:	bf00      	nop
 8005100:	20000014 	.word	0x20000014
 8005104:	08005889 	.word	0x08005889
 8005108:	20000020 	.word	0x20000020

0800510c <cleanup_stdio>:
 800510c:	6841      	ldr	r1, [r0, #4]
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <cleanup_stdio+0x34>)
 8005110:	4299      	cmp	r1, r3
 8005112:	b510      	push	{r4, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	d001      	beq.n	800511c <cleanup_stdio+0x10>
 8005118:	f000 fbb6 	bl	8005888 <_fflush_r>
 800511c:	68a1      	ldr	r1, [r4, #8]
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <cleanup_stdio+0x38>)
 8005120:	4299      	cmp	r1, r3
 8005122:	d002      	beq.n	800512a <cleanup_stdio+0x1e>
 8005124:	4620      	mov	r0, r4
 8005126:	f000 fbaf 	bl	8005888 <_fflush_r>
 800512a:	68e1      	ldr	r1, [r4, #12]
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <cleanup_stdio+0x3c>)
 800512e:	4299      	cmp	r1, r3
 8005130:	d004      	beq.n	800513c <cleanup_stdio+0x30>
 8005132:	4620      	mov	r0, r4
 8005134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005138:	f000 bba6 	b.w	8005888 <_fflush_r>
 800513c:	bd10      	pop	{r4, pc}
 800513e:	bf00      	nop
 8005140:	20000598 	.word	0x20000598
 8005144:	20000600 	.word	0x20000600
 8005148:	20000668 	.word	0x20000668

0800514c <global_stdio_init.part.0>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <global_stdio_init.part.0+0x30>)
 8005150:	4c0b      	ldr	r4, [pc, #44]	; (8005180 <global_stdio_init.part.0+0x34>)
 8005152:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <global_stdio_init.part.0+0x38>)
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	4620      	mov	r0, r4
 8005158:	2200      	movs	r2, #0
 800515a:	2104      	movs	r1, #4
 800515c:	f7ff ff94 	bl	8005088 <std>
 8005160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005164:	2201      	movs	r2, #1
 8005166:	2109      	movs	r1, #9
 8005168:	f7ff ff8e 	bl	8005088 <std>
 800516c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005170:	2202      	movs	r2, #2
 8005172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005176:	2112      	movs	r1, #18
 8005178:	f7ff bf86 	b.w	8005088 <std>
 800517c:	200006d0 	.word	0x200006d0
 8005180:	20000598 	.word	0x20000598
 8005184:	080050f5 	.word	0x080050f5

08005188 <__sfp_lock_acquire>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sfp_lock_acquire+0x8>)
 800518a:	f000 b9fc 	b.w	8005586 <__retarget_lock_acquire_recursive>
 800518e:	bf00      	nop
 8005190:	200006d9 	.word	0x200006d9

08005194 <__sfp_lock_release>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__sfp_lock_release+0x8>)
 8005196:	f000 b9f7 	b.w	8005588 <__retarget_lock_release_recursive>
 800519a:	bf00      	nop
 800519c:	200006d9 	.word	0x200006d9

080051a0 <__sinit>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4604      	mov	r4, r0
 80051a4:	f7ff fff0 	bl	8005188 <__sfp_lock_acquire>
 80051a8:	6a23      	ldr	r3, [r4, #32]
 80051aa:	b11b      	cbz	r3, 80051b4 <__sinit+0x14>
 80051ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b0:	f7ff bff0 	b.w	8005194 <__sfp_lock_release>
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <__sinit+0x28>)
 80051b6:	6223      	str	r3, [r4, #32]
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <__sinit+0x2c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f5      	bne.n	80051ac <__sinit+0xc>
 80051c0:	f7ff ffc4 	bl	800514c <global_stdio_init.part.0>
 80051c4:	e7f2      	b.n	80051ac <__sinit+0xc>
 80051c6:	bf00      	nop
 80051c8:	0800510d 	.word	0x0800510d
 80051cc:	200006d0 	.word	0x200006d0

080051d0 <_fwalk_sglue>:
 80051d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d4:	4607      	mov	r7, r0
 80051d6:	4688      	mov	r8, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	2600      	movs	r6, #0
 80051dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051e0:	f1b9 0901 	subs.w	r9, r9, #1
 80051e4:	d505      	bpl.n	80051f2 <_fwalk_sglue+0x22>
 80051e6:	6824      	ldr	r4, [r4, #0]
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	d1f7      	bne.n	80051dc <_fwalk_sglue+0xc>
 80051ec:	4630      	mov	r0, r6
 80051ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f2:	89ab      	ldrh	r3, [r5, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d907      	bls.n	8005208 <_fwalk_sglue+0x38>
 80051f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051fc:	3301      	adds	r3, #1
 80051fe:	d003      	beq.n	8005208 <_fwalk_sglue+0x38>
 8005200:	4629      	mov	r1, r5
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	4306      	orrs	r6, r0
 8005208:	3568      	adds	r5, #104	; 0x68
 800520a:	e7e9      	b.n	80051e0 <_fwalk_sglue+0x10>

0800520c <_puts_r>:
 800520c:	6a03      	ldr	r3, [r0, #32]
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	6884      	ldr	r4, [r0, #8]
 8005212:	4605      	mov	r5, r0
 8005214:	460e      	mov	r6, r1
 8005216:	b90b      	cbnz	r3, 800521c <_puts_r+0x10>
 8005218:	f7ff ffc2 	bl	80051a0 <__sinit>
 800521c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d405      	bmi.n	800522e <_puts_r+0x22>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	0598      	lsls	r0, r3, #22
 8005226:	d402      	bmi.n	800522e <_puts_r+0x22>
 8005228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522a:	f000 f9ac 	bl	8005586 <__retarget_lock_acquire_recursive>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	0719      	lsls	r1, r3, #28
 8005232:	d513      	bpl.n	800525c <_puts_r+0x50>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	b18b      	cbz	r3, 800525c <_puts_r+0x50>
 8005238:	3e01      	subs	r6, #1
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005240:	3b01      	subs	r3, #1
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	b9e9      	cbnz	r1, 8005282 <_puts_r+0x76>
 8005246:	2b00      	cmp	r3, #0
 8005248:	da2e      	bge.n	80052a8 <_puts_r+0x9c>
 800524a:	4622      	mov	r2, r4
 800524c:	210a      	movs	r1, #10
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f87b 	bl	800534a <__swbuf_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d007      	beq.n	8005268 <_puts_r+0x5c>
 8005258:	250a      	movs	r5, #10
 800525a:	e007      	b.n	800526c <_puts_r+0x60>
 800525c:	4621      	mov	r1, r4
 800525e:	4628      	mov	r0, r5
 8005260:	f000 f8b0 	bl	80053c4 <__swsetup_r>
 8005264:	2800      	cmp	r0, #0
 8005266:	d0e7      	beq.n	8005238 <_puts_r+0x2c>
 8005268:	f04f 35ff 	mov.w	r5, #4294967295
 800526c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800526e:	07da      	lsls	r2, r3, #31
 8005270:	d405      	bmi.n	800527e <_puts_r+0x72>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	059b      	lsls	r3, r3, #22
 8005276:	d402      	bmi.n	800527e <_puts_r+0x72>
 8005278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800527a:	f000 f985 	bl	8005588 <__retarget_lock_release_recursive>
 800527e:	4628      	mov	r0, r5
 8005280:	bd70      	pop	{r4, r5, r6, pc}
 8005282:	2b00      	cmp	r3, #0
 8005284:	da04      	bge.n	8005290 <_puts_r+0x84>
 8005286:	69a2      	ldr	r2, [r4, #24]
 8005288:	429a      	cmp	r2, r3
 800528a:	dc06      	bgt.n	800529a <_puts_r+0x8e>
 800528c:	290a      	cmp	r1, #10
 800528e:	d004      	beq.n	800529a <_puts_r+0x8e>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	6022      	str	r2, [r4, #0]
 8005296:	7019      	strb	r1, [r3, #0]
 8005298:	e7cf      	b.n	800523a <_puts_r+0x2e>
 800529a:	4622      	mov	r2, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f854 	bl	800534a <__swbuf_r>
 80052a2:	3001      	adds	r0, #1
 80052a4:	d1c9      	bne.n	800523a <_puts_r+0x2e>
 80052a6:	e7df      	b.n	8005268 <_puts_r+0x5c>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	250a      	movs	r5, #10
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	701d      	strb	r5, [r3, #0]
 80052b2:	e7db      	b.n	800526c <_puts_r+0x60>

080052b4 <puts>:
 80052b4:	4b02      	ldr	r3, [pc, #8]	; (80052c0 <puts+0xc>)
 80052b6:	4601      	mov	r1, r0
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f7ff bfa7 	b.w	800520c <_puts_r>
 80052be:	bf00      	nop
 80052c0:	2000006c 	.word	0x2000006c

080052c4 <__sread>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	460c      	mov	r4, r1
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	f000 f90c 	bl	80054e8 <_read_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	bfab      	itete	ge
 80052d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052d6:	89a3      	ldrhlt	r3, [r4, #12]
 80052d8:	181b      	addge	r3, r3, r0
 80052da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052de:	bfac      	ite	ge
 80052e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e2:	81a3      	strhlt	r3, [r4, #12]
 80052e4:	bd10      	pop	{r4, pc}

080052e6 <__swrite>:
 80052e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	461f      	mov	r7, r3
 80052ec:	898b      	ldrh	r3, [r1, #12]
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	4616      	mov	r6, r2
 80052f6:	d505      	bpl.n	8005304 <__swrite+0x1e>
 80052f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fc:	2302      	movs	r3, #2
 80052fe:	2200      	movs	r2, #0
 8005300:	f000 f8e0 	bl	80054c4 <_lseek_r>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	4632      	mov	r2, r6
 8005312:	463b      	mov	r3, r7
 8005314:	4628      	mov	r0, r5
 8005316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	f000 b8f7 	b.w	800550c <_write_r>

0800531e <__sseek>:
 800531e:	b510      	push	{r4, lr}
 8005320:	460c      	mov	r4, r1
 8005322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005326:	f000 f8cd 	bl	80054c4 <_lseek_r>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	bf15      	itete	ne
 8005330:	6560      	strne	r0, [r4, #84]	; 0x54
 8005332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533a:	81a3      	strheq	r3, [r4, #12]
 800533c:	bf18      	it	ne
 800533e:	81a3      	strhne	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__sclose>:
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 b8ad 	b.w	80054a4 <_close_r>

0800534a <__swbuf_r>:
 800534a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534c:	460e      	mov	r6, r1
 800534e:	4614      	mov	r4, r2
 8005350:	4605      	mov	r5, r0
 8005352:	b118      	cbz	r0, 800535c <__swbuf_r+0x12>
 8005354:	6a03      	ldr	r3, [r0, #32]
 8005356:	b90b      	cbnz	r3, 800535c <__swbuf_r+0x12>
 8005358:	f7ff ff22 	bl	80051a0 <__sinit>
 800535c:	69a3      	ldr	r3, [r4, #24]
 800535e:	60a3      	str	r3, [r4, #8]
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	071a      	lsls	r2, r3, #28
 8005364:	d525      	bpl.n	80053b2 <__swbuf_r+0x68>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	b31b      	cbz	r3, 80053b2 <__swbuf_r+0x68>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	1a98      	subs	r0, r3, r2
 8005370:	6963      	ldr	r3, [r4, #20]
 8005372:	b2f6      	uxtb	r6, r6
 8005374:	4283      	cmp	r3, r0
 8005376:	4637      	mov	r7, r6
 8005378:	dc04      	bgt.n	8005384 <__swbuf_r+0x3a>
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fa83 	bl	8005888 <_fflush_r>
 8005382:	b9e0      	cbnz	r0, 80053be <__swbuf_r+0x74>
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	60a3      	str	r3, [r4, #8]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	6022      	str	r2, [r4, #0]
 8005390:	701e      	strb	r6, [r3, #0]
 8005392:	6962      	ldr	r2, [r4, #20]
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	429a      	cmp	r2, r3
 8005398:	d004      	beq.n	80053a4 <__swbuf_r+0x5a>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	07db      	lsls	r3, r3, #31
 800539e:	d506      	bpl.n	80053ae <__swbuf_r+0x64>
 80053a0:	2e0a      	cmp	r6, #10
 80053a2:	d104      	bne.n	80053ae <__swbuf_r+0x64>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fa6e 	bl	8005888 <_fflush_r>
 80053ac:	b938      	cbnz	r0, 80053be <__swbuf_r+0x74>
 80053ae:	4638      	mov	r0, r7
 80053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b2:	4621      	mov	r1, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f805 	bl	80053c4 <__swsetup_r>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d0d5      	beq.n	800536a <__swbuf_r+0x20>
 80053be:	f04f 37ff 	mov.w	r7, #4294967295
 80053c2:	e7f4      	b.n	80053ae <__swbuf_r+0x64>

080053c4 <__swsetup_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <__swsetup_r+0xac>)
 80053c8:	4605      	mov	r5, r0
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	460c      	mov	r4, r1
 80053ce:	b118      	cbz	r0, 80053d8 <__swsetup_r+0x14>
 80053d0:	6a03      	ldr	r3, [r0, #32]
 80053d2:	b90b      	cbnz	r3, 80053d8 <__swsetup_r+0x14>
 80053d4:	f7ff fee4 	bl	80051a0 <__sinit>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053de:	0718      	lsls	r0, r3, #28
 80053e0:	d422      	bmi.n	8005428 <__swsetup_r+0x64>
 80053e2:	06d9      	lsls	r1, r3, #27
 80053e4:	d407      	bmi.n	80053f6 <__swsetup_r+0x32>
 80053e6:	2309      	movs	r3, #9
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e034      	b.n	8005460 <__swsetup_r+0x9c>
 80053f6:	0758      	lsls	r0, r3, #29
 80053f8:	d512      	bpl.n	8005420 <__swsetup_r+0x5c>
 80053fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053fc:	b141      	cbz	r1, 8005410 <__swsetup_r+0x4c>
 80053fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005402:	4299      	cmp	r1, r3
 8005404:	d002      	beq.n	800540c <__swsetup_r+0x48>
 8005406:	4628      	mov	r0, r5
 8005408:	f000 f8c0 	bl	800558c <_free_r>
 800540c:	2300      	movs	r3, #0
 800540e:	6363      	str	r3, [r4, #52]	; 0x34
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	2300      	movs	r3, #0
 800541a:	6063      	str	r3, [r4, #4]
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	f043 0308 	orr.w	r3, r3, #8
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	b94b      	cbnz	r3, 8005440 <__swsetup_r+0x7c>
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005436:	d003      	beq.n	8005440 <__swsetup_r+0x7c>
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fa72 	bl	8005924 <__smakebuf_r>
 8005440:	89a0      	ldrh	r0, [r4, #12]
 8005442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005446:	f010 0301 	ands.w	r3, r0, #1
 800544a:	d00a      	beq.n	8005462 <__swsetup_r+0x9e>
 800544c:	2300      	movs	r3, #0
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	6963      	ldr	r3, [r4, #20]
 8005452:	425b      	negs	r3, r3
 8005454:	61a3      	str	r3, [r4, #24]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	b943      	cbnz	r3, 800546c <__swsetup_r+0xa8>
 800545a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800545e:	d1c4      	bne.n	80053ea <__swsetup_r+0x26>
 8005460:	bd38      	pop	{r3, r4, r5, pc}
 8005462:	0781      	lsls	r1, r0, #30
 8005464:	bf58      	it	pl
 8005466:	6963      	ldrpl	r3, [r4, #20]
 8005468:	60a3      	str	r3, [r4, #8]
 800546a:	e7f4      	b.n	8005456 <__swsetup_r+0x92>
 800546c:	2000      	movs	r0, #0
 800546e:	e7f7      	b.n	8005460 <__swsetup_r+0x9c>
 8005470:	2000006c 	.word	0x2000006c

08005474 <memcmp>:
 8005474:	b510      	push	{r4, lr}
 8005476:	3901      	subs	r1, #1
 8005478:	4402      	add	r2, r0
 800547a:	4290      	cmp	r0, r2
 800547c:	d101      	bne.n	8005482 <memcmp+0xe>
 800547e:	2000      	movs	r0, #0
 8005480:	e005      	b.n	800548e <memcmp+0x1a>
 8005482:	7803      	ldrb	r3, [r0, #0]
 8005484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005488:	42a3      	cmp	r3, r4
 800548a:	d001      	beq.n	8005490 <memcmp+0x1c>
 800548c:	1b18      	subs	r0, r3, r4
 800548e:	bd10      	pop	{r4, pc}
 8005490:	3001      	adds	r0, #1
 8005492:	e7f2      	b.n	800547a <memcmp+0x6>

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <_close_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d06      	ldr	r5, [pc, #24]	; (80054c0 <_close_r+0x1c>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fb fb61 	bl	8000b76 <_close>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_close_r+0x1a>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_close_r+0x1a>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	200006d4 	.word	0x200006d4

080054c4 <_lseek_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	; (80054e4 <_lseek_r+0x20>)
 80054c8:	4604      	mov	r4, r0
 80054ca:	4608      	mov	r0, r1
 80054cc:	4611      	mov	r1, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	602a      	str	r2, [r5, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f7fb fb76 	bl	8000bc4 <_lseek>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_lseek_r+0x1e>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_lseek_r+0x1e>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200006d4 	.word	0x200006d4

080054e8 <_read_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_read_r+0x20>)
 80054ec:	4604      	mov	r4, r0
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fb fb20 	bl	8000b3c <_read>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_read_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_read_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200006d4 	.word	0x200006d4

0800550c <_write_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_write_r+0x20>)
 8005510:	4604      	mov	r4, r0
 8005512:	4608      	mov	r0, r1
 8005514:	4611      	mov	r1, r2
 8005516:	2200      	movs	r2, #0
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fa ffd2 	bl	80004c4 <_write>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_write_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_write_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200006d4 	.word	0x200006d4

08005530 <__errno>:
 8005530:	4b01      	ldr	r3, [pc, #4]	; (8005538 <__errno+0x8>)
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	2000006c 	.word	0x2000006c

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 fa56 	bl	8005a00 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	080067fc 	.word	0x080067fc
 8005578:	080067fc 	.word	0x080067fc
 800557c:	080067fc 	.word	0x080067fc
 8005580:	08006800 	.word	0x08006800

08005584 <__retarget_lock_init_recursive>:
 8005584:	4770      	bx	lr

08005586 <__retarget_lock_acquire_recursive>:
 8005586:	4770      	bx	lr

08005588 <__retarget_lock_release_recursive>:
 8005588:	4770      	bx	lr
	...

0800558c <_free_r>:
 800558c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558e:	2900      	cmp	r1, #0
 8005590:	d044      	beq.n	800561c <_free_r+0x90>
 8005592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005596:	9001      	str	r0, [sp, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f1a1 0404 	sub.w	r4, r1, #4
 800559e:	bfb8      	it	lt
 80055a0:	18e4      	addlt	r4, r4, r3
 80055a2:	f000 f8df 	bl	8005764 <__malloc_lock>
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <_free_r+0x94>)
 80055a8:	9801      	ldr	r0, [sp, #4]
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	b933      	cbnz	r3, 80055bc <_free_r+0x30>
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	6014      	str	r4, [r2, #0]
 80055b2:	b003      	add	sp, #12
 80055b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055b8:	f000 b8da 	b.w	8005770 <__malloc_unlock>
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d908      	bls.n	80055d2 <_free_r+0x46>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	428b      	cmp	r3, r1
 80055c6:	bf01      	itttt	eq
 80055c8:	6819      	ldreq	r1, [r3, #0]
 80055ca:	685b      	ldreq	r3, [r3, #4]
 80055cc:	1949      	addeq	r1, r1, r5
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	e7ed      	b.n	80055ae <_free_r+0x22>
 80055d2:	461a      	mov	r2, r3
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b10b      	cbz	r3, 80055dc <_free_r+0x50>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d9fa      	bls.n	80055d2 <_free_r+0x46>
 80055dc:	6811      	ldr	r1, [r2, #0]
 80055de:	1855      	adds	r5, r2, r1
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	d10b      	bne.n	80055fc <_free_r+0x70>
 80055e4:	6824      	ldr	r4, [r4, #0]
 80055e6:	4421      	add	r1, r4
 80055e8:	1854      	adds	r4, r2, r1
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	d1e0      	bne.n	80055b2 <_free_r+0x26>
 80055f0:	681c      	ldr	r4, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	440c      	add	r4, r1
 80055f8:	6014      	str	r4, [r2, #0]
 80055fa:	e7da      	b.n	80055b2 <_free_r+0x26>
 80055fc:	d902      	bls.n	8005604 <_free_r+0x78>
 80055fe:	230c      	movs	r3, #12
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	e7d6      	b.n	80055b2 <_free_r+0x26>
 8005604:	6825      	ldr	r5, [r4, #0]
 8005606:	1961      	adds	r1, r4, r5
 8005608:	428b      	cmp	r3, r1
 800560a:	bf04      	itt	eq
 800560c:	6819      	ldreq	r1, [r3, #0]
 800560e:	685b      	ldreq	r3, [r3, #4]
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	bf04      	itt	eq
 8005614:	1949      	addeq	r1, r1, r5
 8005616:	6021      	streq	r1, [r4, #0]
 8005618:	6054      	str	r4, [r2, #4]
 800561a:	e7ca      	b.n	80055b2 <_free_r+0x26>
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}
 8005620:	200006dc 	.word	0x200006dc

08005624 <sbrk_aligned>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	4e0e      	ldr	r6, [pc, #56]	; (8005660 <sbrk_aligned+0x3c>)
 8005628:	460c      	mov	r4, r1
 800562a:	6831      	ldr	r1, [r6, #0]
 800562c:	4605      	mov	r5, r0
 800562e:	b911      	cbnz	r1, 8005636 <sbrk_aligned+0x12>
 8005630:	f000 f9d6 	bl	80059e0 <_sbrk_r>
 8005634:	6030      	str	r0, [r6, #0]
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f9d1 	bl	80059e0 <_sbrk_r>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d00a      	beq.n	8005658 <sbrk_aligned+0x34>
 8005642:	1cc4      	adds	r4, r0, #3
 8005644:	f024 0403 	bic.w	r4, r4, #3
 8005648:	42a0      	cmp	r0, r4
 800564a:	d007      	beq.n	800565c <sbrk_aligned+0x38>
 800564c:	1a21      	subs	r1, r4, r0
 800564e:	4628      	mov	r0, r5
 8005650:	f000 f9c6 	bl	80059e0 <_sbrk_r>
 8005654:	3001      	adds	r0, #1
 8005656:	d101      	bne.n	800565c <sbrk_aligned+0x38>
 8005658:	f04f 34ff 	mov.w	r4, #4294967295
 800565c:	4620      	mov	r0, r4
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	200006e0 	.word	0x200006e0

08005664 <_malloc_r>:
 8005664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005668:	1ccd      	adds	r5, r1, #3
 800566a:	f025 0503 	bic.w	r5, r5, #3
 800566e:	3508      	adds	r5, #8
 8005670:	2d0c      	cmp	r5, #12
 8005672:	bf38      	it	cc
 8005674:	250c      	movcc	r5, #12
 8005676:	2d00      	cmp	r5, #0
 8005678:	4607      	mov	r7, r0
 800567a:	db01      	blt.n	8005680 <_malloc_r+0x1c>
 800567c:	42a9      	cmp	r1, r5
 800567e:	d905      	bls.n	800568c <_malloc_r+0x28>
 8005680:	230c      	movs	r3, #12
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	2600      	movs	r6, #0
 8005686:	4630      	mov	r0, r6
 8005688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005760 <_malloc_r+0xfc>
 8005690:	f000 f868 	bl	8005764 <__malloc_lock>
 8005694:	f8d8 3000 	ldr.w	r3, [r8]
 8005698:	461c      	mov	r4, r3
 800569a:	bb5c      	cbnz	r4, 80056f4 <_malloc_r+0x90>
 800569c:	4629      	mov	r1, r5
 800569e:	4638      	mov	r0, r7
 80056a0:	f7ff ffc0 	bl	8005624 <sbrk_aligned>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	4604      	mov	r4, r0
 80056a8:	d155      	bne.n	8005756 <_malloc_r+0xf2>
 80056aa:	f8d8 4000 	ldr.w	r4, [r8]
 80056ae:	4626      	mov	r6, r4
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	d145      	bne.n	8005740 <_malloc_r+0xdc>
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d048      	beq.n	800574a <_malloc_r+0xe6>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	4631      	mov	r1, r6
 80056bc:	4638      	mov	r0, r7
 80056be:	eb04 0903 	add.w	r9, r4, r3
 80056c2:	f000 f98d 	bl	80059e0 <_sbrk_r>
 80056c6:	4581      	cmp	r9, r0
 80056c8:	d13f      	bne.n	800574a <_malloc_r+0xe6>
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	1a6d      	subs	r5, r5, r1
 80056ce:	4629      	mov	r1, r5
 80056d0:	4638      	mov	r0, r7
 80056d2:	f7ff ffa7 	bl	8005624 <sbrk_aligned>
 80056d6:	3001      	adds	r0, #1
 80056d8:	d037      	beq.n	800574a <_malloc_r+0xe6>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	442b      	add	r3, r5
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d038      	beq.n	800575a <_malloc_r+0xf6>
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	42a2      	cmp	r2, r4
 80056ec:	d12b      	bne.n	8005746 <_malloc_r+0xe2>
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	e00f      	b.n	8005714 <_malloc_r+0xb0>
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	1b52      	subs	r2, r2, r5
 80056f8:	d41f      	bmi.n	800573a <_malloc_r+0xd6>
 80056fa:	2a0b      	cmp	r2, #11
 80056fc:	d917      	bls.n	800572e <_malloc_r+0xca>
 80056fe:	1961      	adds	r1, r4, r5
 8005700:	42a3      	cmp	r3, r4
 8005702:	6025      	str	r5, [r4, #0]
 8005704:	bf18      	it	ne
 8005706:	6059      	strne	r1, [r3, #4]
 8005708:	6863      	ldr	r3, [r4, #4]
 800570a:	bf08      	it	eq
 800570c:	f8c8 1000 	streq.w	r1, [r8]
 8005710:	5162      	str	r2, [r4, r5]
 8005712:	604b      	str	r3, [r1, #4]
 8005714:	4638      	mov	r0, r7
 8005716:	f104 060b 	add.w	r6, r4, #11
 800571a:	f000 f829 	bl	8005770 <__malloc_unlock>
 800571e:	f026 0607 	bic.w	r6, r6, #7
 8005722:	1d23      	adds	r3, r4, #4
 8005724:	1af2      	subs	r2, r6, r3
 8005726:	d0ae      	beq.n	8005686 <_malloc_r+0x22>
 8005728:	1b9b      	subs	r3, r3, r6
 800572a:	50a3      	str	r3, [r4, r2]
 800572c:	e7ab      	b.n	8005686 <_malloc_r+0x22>
 800572e:	42a3      	cmp	r3, r4
 8005730:	6862      	ldr	r2, [r4, #4]
 8005732:	d1dd      	bne.n	80056f0 <_malloc_r+0x8c>
 8005734:	f8c8 2000 	str.w	r2, [r8]
 8005738:	e7ec      	b.n	8005714 <_malloc_r+0xb0>
 800573a:	4623      	mov	r3, r4
 800573c:	6864      	ldr	r4, [r4, #4]
 800573e:	e7ac      	b.n	800569a <_malloc_r+0x36>
 8005740:	4634      	mov	r4, r6
 8005742:	6876      	ldr	r6, [r6, #4]
 8005744:	e7b4      	b.n	80056b0 <_malloc_r+0x4c>
 8005746:	4613      	mov	r3, r2
 8005748:	e7cc      	b.n	80056e4 <_malloc_r+0x80>
 800574a:	230c      	movs	r3, #12
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4638      	mov	r0, r7
 8005750:	f000 f80e 	bl	8005770 <__malloc_unlock>
 8005754:	e797      	b.n	8005686 <_malloc_r+0x22>
 8005756:	6025      	str	r5, [r4, #0]
 8005758:	e7dc      	b.n	8005714 <_malloc_r+0xb0>
 800575a:	605b      	str	r3, [r3, #4]
 800575c:	deff      	udf	#255	; 0xff
 800575e:	bf00      	nop
 8005760:	200006dc 	.word	0x200006dc

08005764 <__malloc_lock>:
 8005764:	4801      	ldr	r0, [pc, #4]	; (800576c <__malloc_lock+0x8>)
 8005766:	f7ff bf0e 	b.w	8005586 <__retarget_lock_acquire_recursive>
 800576a:	bf00      	nop
 800576c:	200006d8 	.word	0x200006d8

08005770 <__malloc_unlock>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__malloc_unlock+0x8>)
 8005772:	f7ff bf09 	b.w	8005588 <__retarget_lock_release_recursive>
 8005776:	bf00      	nop
 8005778:	200006d8 	.word	0x200006d8

0800577c <__sflush_r>:
 800577c:	898a      	ldrh	r2, [r1, #12]
 800577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	4605      	mov	r5, r0
 8005784:	0710      	lsls	r0, r2, #28
 8005786:	460c      	mov	r4, r1
 8005788:	d458      	bmi.n	800583c <__sflush_r+0xc0>
 800578a:	684b      	ldr	r3, [r1, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	dc05      	bgt.n	800579c <__sflush_r+0x20>
 8005790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	dc02      	bgt.n	800579c <__sflush_r+0x20>
 8005796:	2000      	movs	r0, #0
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d0f9      	beq.n	8005796 <__sflush_r+0x1a>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057a8:	682f      	ldr	r7, [r5, #0]
 80057aa:	6a21      	ldr	r1, [r4, #32]
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	d032      	beq.n	8005816 <__sflush_r+0x9a>
 80057b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	075a      	lsls	r2, r3, #29
 80057b6:	d505      	bpl.n	80057c4 <__sflush_r+0x48>
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	1ac0      	subs	r0, r0, r3
 80057bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057be:	b10b      	cbz	r3, 80057c4 <__sflush_r+0x48>
 80057c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057c2:	1ac0      	subs	r0, r0, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	4602      	mov	r2, r0
 80057c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ca:	6a21      	ldr	r1, [r4, #32]
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b0      	blx	r6
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	d106      	bne.n	80057e4 <__sflush_r+0x68>
 80057d6:	6829      	ldr	r1, [r5, #0]
 80057d8:	291d      	cmp	r1, #29
 80057da:	d82b      	bhi.n	8005834 <__sflush_r+0xb8>
 80057dc:	4a29      	ldr	r2, [pc, #164]	; (8005884 <__sflush_r+0x108>)
 80057de:	410a      	asrs	r2, r1
 80057e0:	07d6      	lsls	r6, r2, #31
 80057e2:	d427      	bmi.n	8005834 <__sflush_r+0xb8>
 80057e4:	2200      	movs	r2, #0
 80057e6:	6062      	str	r2, [r4, #4]
 80057e8:	04d9      	lsls	r1, r3, #19
 80057ea:	6922      	ldr	r2, [r4, #16]
 80057ec:	6022      	str	r2, [r4, #0]
 80057ee:	d504      	bpl.n	80057fa <__sflush_r+0x7e>
 80057f0:	1c42      	adds	r2, r0, #1
 80057f2:	d101      	bne.n	80057f8 <__sflush_r+0x7c>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b903      	cbnz	r3, 80057fa <__sflush_r+0x7e>
 80057f8:	6560      	str	r0, [r4, #84]	; 0x54
 80057fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057fc:	602f      	str	r7, [r5, #0]
 80057fe:	2900      	cmp	r1, #0
 8005800:	d0c9      	beq.n	8005796 <__sflush_r+0x1a>
 8005802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005806:	4299      	cmp	r1, r3
 8005808:	d002      	beq.n	8005810 <__sflush_r+0x94>
 800580a:	4628      	mov	r0, r5
 800580c:	f7ff febe 	bl	800558c <_free_r>
 8005810:	2000      	movs	r0, #0
 8005812:	6360      	str	r0, [r4, #52]	; 0x34
 8005814:	e7c0      	b.n	8005798 <__sflush_r+0x1c>
 8005816:	2301      	movs	r3, #1
 8005818:	4628      	mov	r0, r5
 800581a:	47b0      	blx	r6
 800581c:	1c41      	adds	r1, r0, #1
 800581e:	d1c8      	bne.n	80057b2 <__sflush_r+0x36>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0c5      	beq.n	80057b2 <__sflush_r+0x36>
 8005826:	2b1d      	cmp	r3, #29
 8005828:	d001      	beq.n	800582e <__sflush_r+0xb2>
 800582a:	2b16      	cmp	r3, #22
 800582c:	d101      	bne.n	8005832 <__sflush_r+0xb6>
 800582e:	602f      	str	r7, [r5, #0]
 8005830:	e7b1      	b.n	8005796 <__sflush_r+0x1a>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005838:	81a3      	strh	r3, [r4, #12]
 800583a:	e7ad      	b.n	8005798 <__sflush_r+0x1c>
 800583c:	690f      	ldr	r7, [r1, #16]
 800583e:	2f00      	cmp	r7, #0
 8005840:	d0a9      	beq.n	8005796 <__sflush_r+0x1a>
 8005842:	0793      	lsls	r3, r2, #30
 8005844:	680e      	ldr	r6, [r1, #0]
 8005846:	bf08      	it	eq
 8005848:	694b      	ldreq	r3, [r1, #20]
 800584a:	600f      	str	r7, [r1, #0]
 800584c:	bf18      	it	ne
 800584e:	2300      	movne	r3, #0
 8005850:	eba6 0807 	sub.w	r8, r6, r7
 8005854:	608b      	str	r3, [r1, #8]
 8005856:	f1b8 0f00 	cmp.w	r8, #0
 800585a:	dd9c      	ble.n	8005796 <__sflush_r+0x1a>
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005860:	4643      	mov	r3, r8
 8005862:	463a      	mov	r2, r7
 8005864:	4628      	mov	r0, r5
 8005866:	47b0      	blx	r6
 8005868:	2800      	cmp	r0, #0
 800586a:	dc06      	bgt.n	800587a <__sflush_r+0xfe>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	e78e      	b.n	8005798 <__sflush_r+0x1c>
 800587a:	4407      	add	r7, r0
 800587c:	eba8 0800 	sub.w	r8, r8, r0
 8005880:	e7e9      	b.n	8005856 <__sflush_r+0xda>
 8005882:	bf00      	nop
 8005884:	dfbffffe 	.word	0xdfbffffe

08005888 <_fflush_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	690b      	ldr	r3, [r1, #16]
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b913      	cbnz	r3, 8005898 <_fflush_r+0x10>
 8005892:	2500      	movs	r5, #0
 8005894:	4628      	mov	r0, r5
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	b118      	cbz	r0, 80058a2 <_fflush_r+0x1a>
 800589a:	6a03      	ldr	r3, [r0, #32]
 800589c:	b90b      	cbnz	r3, 80058a2 <_fflush_r+0x1a>
 800589e:	f7ff fc7f 	bl	80051a0 <__sinit>
 80058a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f3      	beq.n	8005892 <_fflush_r+0xa>
 80058aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058ac:	07d0      	lsls	r0, r2, #31
 80058ae:	d404      	bmi.n	80058ba <_fflush_r+0x32>
 80058b0:	0599      	lsls	r1, r3, #22
 80058b2:	d402      	bmi.n	80058ba <_fflush_r+0x32>
 80058b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058b6:	f7ff fe66 	bl	8005586 <__retarget_lock_acquire_recursive>
 80058ba:	4628      	mov	r0, r5
 80058bc:	4621      	mov	r1, r4
 80058be:	f7ff ff5d 	bl	800577c <__sflush_r>
 80058c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058c4:	07da      	lsls	r2, r3, #31
 80058c6:	4605      	mov	r5, r0
 80058c8:	d4e4      	bmi.n	8005894 <_fflush_r+0xc>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	059b      	lsls	r3, r3, #22
 80058ce:	d4e1      	bmi.n	8005894 <_fflush_r+0xc>
 80058d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058d2:	f7ff fe59 	bl	8005588 <__retarget_lock_release_recursive>
 80058d6:	e7dd      	b.n	8005894 <_fflush_r+0xc>

080058d8 <__swhatbuf_r>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	460c      	mov	r4, r1
 80058dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e0:	2900      	cmp	r1, #0
 80058e2:	b096      	sub	sp, #88	; 0x58
 80058e4:	4615      	mov	r5, r2
 80058e6:	461e      	mov	r6, r3
 80058e8:	da0d      	bge.n	8005906 <__swhatbuf_r+0x2e>
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058fa:	2340      	movne	r3, #64	; 0x40
 80058fc:	2000      	movs	r0, #0
 80058fe:	6031      	str	r1, [r6, #0]
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	b016      	add	sp, #88	; 0x58
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	466a      	mov	r2, sp
 8005908:	f000 f848 	bl	800599c <_fstat_r>
 800590c:	2800      	cmp	r0, #0
 800590e:	dbec      	blt.n	80058ea <__swhatbuf_r+0x12>
 8005910:	9901      	ldr	r1, [sp, #4]
 8005912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800591a:	4259      	negs	r1, r3
 800591c:	4159      	adcs	r1, r3
 800591e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005922:	e7eb      	b.n	80058fc <__swhatbuf_r+0x24>

08005924 <__smakebuf_r>:
 8005924:	898b      	ldrh	r3, [r1, #12]
 8005926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005928:	079d      	lsls	r5, r3, #30
 800592a:	4606      	mov	r6, r0
 800592c:	460c      	mov	r4, r1
 800592e:	d507      	bpl.n	8005940 <__smakebuf_r+0x1c>
 8005930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	2301      	movs	r3, #1
 800593a:	6163      	str	r3, [r4, #20]
 800593c:	b002      	add	sp, #8
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	ab01      	add	r3, sp, #4
 8005942:	466a      	mov	r2, sp
 8005944:	f7ff ffc8 	bl	80058d8 <__swhatbuf_r>
 8005948:	9900      	ldr	r1, [sp, #0]
 800594a:	4605      	mov	r5, r0
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff fe89 	bl	8005664 <_malloc_r>
 8005952:	b948      	cbnz	r0, 8005968 <__smakebuf_r+0x44>
 8005954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005958:	059a      	lsls	r2, r3, #22
 800595a:	d4ef      	bmi.n	800593c <__smakebuf_r+0x18>
 800595c:	f023 0303 	bic.w	r3, r3, #3
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	e7e3      	b.n	8005930 <__smakebuf_r+0xc>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	6020      	str	r0, [r4, #0]
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	9b00      	ldr	r3, [sp, #0]
 8005974:	6163      	str	r3, [r4, #20]
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	6120      	str	r0, [r4, #16]
 800597a:	b15b      	cbz	r3, 8005994 <__smakebuf_r+0x70>
 800597c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005980:	4630      	mov	r0, r6
 8005982:	f000 f81d 	bl	80059c0 <_isatty_r>
 8005986:	b128      	cbz	r0, 8005994 <__smakebuf_r+0x70>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	431d      	orrs	r5, r3
 8005998:	81a5      	strh	r5, [r4, #12]
 800599a:	e7cf      	b.n	800593c <__smakebuf_r+0x18>

0800599c <_fstat_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d07      	ldr	r5, [pc, #28]	; (80059bc <_fstat_r+0x20>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	f7fb f8f0 	bl	8000b8e <_fstat>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	d102      	bne.n	80059b8 <_fstat_r+0x1c>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	b103      	cbz	r3, 80059b8 <_fstat_r+0x1c>
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	bf00      	nop
 80059bc:	200006d4 	.word	0x200006d4

080059c0 <_isatty_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_isatty_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fb f8ef 	bl	8000bae <_isatty>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_isatty_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_isatty_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	200006d4 	.word	0x200006d4

080059e0 <_sbrk_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d06      	ldr	r5, [pc, #24]	; (80059fc <_sbrk_r+0x1c>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fb f8f8 	bl	8000be0 <_sbrk>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_sbrk_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_sbrk_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200006d4 	.word	0x200006d4

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr
